
Led_pattern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000064c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001390  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ad  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7e  00000000  00000000  0000241d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000760  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d5  00000000  00000000  000037dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003fb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  74:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LEDs_init>:
{
	enu_led_error_status_t enu_ledstatus      = LED_SUCCEED    ;    /** LOCAL VARIABLE TO RETURN LEDs FUNCTION ERROR STATUS **/
	enu_app_error_status_t enu_ledinit_status = APP_SUCCEED    ;    /** LOCAL VARIABLE TO RETURN THE FUNCTION STATUS        **/
	
	
	enu_ledstatus = LED_init(LED1_PORT , LED1_PIN);           /** LED 1  INITIALIZATION **/
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	0e 94 11 01 	call	0x222	; 0x222 <LED_init>
	
	if ( enu_ledstatus == LED_SUCCEED )  /** LED1 INIT SUCCEEDED  **/
  84:	81 11       	cpse	r24, r1
  86:	13 c0       	rjmp	.+38     	; 0xae <LEDs_init+0x32>
	{
		enu_ledstatus = LED_init(LED2_PORT , LED2_PIN);       /** LED 2  INITIALIZATION **/
  88:	67 e0       	ldi	r22, 0x07	; 7
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	0e 94 11 01 	call	0x222	; 0x222 <LED_init>
		
		if ( enu_ledstatus == LED_SUCCEED )  /** LED2 INIT SUCCEEDED  **/
  90:	81 11       	cpse	r24, r1
  92:	0f c0       	rjmp	.+30     	; 0xb2 <LEDs_init+0x36>
		{
			enu_ledstatus = LED_init(LED3_PORT , LED3_PIN);   /** LED 3 INITIALIZATION **/
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 11 01 	call	0x222	; 0x222 <LED_init>
			
			if ( enu_ledstatus == LED_SUCCEED )  /** LED3 INIT SUCCEEDED  **/
  9c:	81 11       	cpse	r24, r1
  9e:	0b c0       	rjmp	.+22     	; 0xb6 <LEDs_init+0x3a>
			{
				enu_ledstatus = LED_init(LED4_PORT , LED4_PIN);  /** LED 4 INITIALIZATION **/
  a0:	64 e0       	ldi	r22, 0x04	; 4
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	0e 94 11 01 	call	0x222	; 0x222 <LED_init>
				
				if ( enu_ledstatus == LED_SUCCEED )  /** LED4 INIT SUCCEEDED  **/
  a8:	81 11       	cpse	r24, r1
  aa:	07 c0       	rjmp	.+14     	; 0xba <LEDs_init+0x3e>
  ac:	08 95       	ret
		}
	}
	
	else   /** LED1 INIT FAILED **/
	{
		enu_ledinit_status = APP_FAILURE ; /** RETURN APP FAILURE **/
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	08 95       	ret
			
		}
		
		else   /** LED2 INIT FAILED **/
		{
			enu_ledinit_status = APP_FAILURE ; /** RETURN APP FAILURE **/
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	08 95       	ret
				}
			}
			
			else   /** LED3 INIT FAILED **/
			{
				enu_ledinit_status = APP_FAILURE ; /** RETURN APP FAILURE **/
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	08 95       	ret
					/** DO NOTHING **/
				}
				
				else  /** LED4 INIT FAILED **/
				{
					enu_ledinit_status = APP_FAILURE ; /** RETURN APP FAILURE **/
  ba:	81 e0       	ldi	r24, 0x01	; 1
		enu_ledinit_status = APP_FAILURE ; /** RETURN APP FAILURE **/
	}
	
	return enu_ledinit_status ;  /** RETURN THE FINAL STATUS **/
	
}
  bc:	08 95       	ret

000000be <BTNs_init>:
{
	enu_button_error_status_t enu_btnstatus   = BUTTON_SUCCEED ;    /** LOCAL VARIABLE TO RETURN LEDs FUNCTION ERROR STATUS **/
	enu_app_error_status_t enu_btninit_status = APP_SUCCEED    ;    /** LOCAL VARIABLE TO RETURN THE FUNCTION STATUS        **/
	
	/** BUTTON INITIALIZATION **/
	enu_btnstatus = BTN_init(BUTTON1_PORT , BUTTON1_PIN);
  be:	64 e0       	ldi	r22, 0x04	; 4
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 ef 00 	call	0x1de	; 0x1de <BTN_init>
	
	if ( enu_btnstatus == BUTTON_SUCCEED) /** BUTTON INITIALIZATION SUCCEEDED **/
  c6:	81 11       	cpse	r24, r1
		/** DO NOTHING **/
	}
	
	else  /** BUTTON INITIALIZATION FAILED **/
	{
		enu_btninit_status = APP_FAILURE ; /** RETURN FAILURE **/
  c8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_btninit_status ; /** RETURN THE FINAL STATUS **/
}
  ca:	08 95       	ret

000000cc <LEDs_off>:
{
	enu_led_error_status_t enu_led_state    = LED_SUCCEED ;  /** LOCAL VARIABLE TO RETURN LED FUNCTION STATUS **/ 
	enu_app_error_status_t enu_ledoff_state = APP_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE FUNCTION STATUS **/
	
	
	enu_led_state = LED_off(LED1_PORT , LED1_PIN);
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	
	if( enu_led_state == LED_SUCCEED )
  d4:	81 11       	cpse	r24, r1
  d6:	13 c0       	rjmp	.+38     	; 0xfe <LEDs_off+0x32>
	{
		enu_led_state = LED_off(LED2_PORT , LED2_PIN);
  d8:	67 e0       	ldi	r22, 0x07	; 7
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
		
		if ( enu_led_state == LED_SUCCEED )
  e0:	81 11       	cpse	r24, r1
  e2:	0f c0       	rjmp	.+30     	; 0x102 <LEDs_off+0x36>
		{
			enu_led_state = LED_off(LED3_PORT , LED3_PIN);
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
			
			if ( enu_led_state == LED_SUCCEED )
  ec:	81 11       	cpse	r24, r1
  ee:	0b c0       	rjmp	.+22     	; 0x106 <LEDs_off+0x3a>
			{
				enu_led_state = LED_off(LED4_PORT , LED4_PIN);
  f0:	64 e0       	ldi	r22, 0x04	; 4
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
				
				if ( enu_led_state == LED_SUCCEED)
  f8:	81 11       	cpse	r24, r1
  fa:	07 c0       	rjmp	.+14     	; 0x10a <LEDs_off+0x3e>
  fc:	08 95       	ret
		}
	}
	
	else /** LED 1 FAILED **/
	{
		enu_ledoff_state = APP_FAILURE ;/** RETURN APP FAILURE **/
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
			}
		}
		
		else  /** LED 2 FAILED **/
		{
			enu_ledoff_state = APP_FAILURE ;/** RETURN APP FAILURE **/
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	08 95       	ret
				}
			}
			
			else  /** LED 3 FAILED **/
			{
				enu_ledoff_state = APP_FAILURE ;/** RETURN APP FAILURE **/
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
					/** DO NOTHING **/
				}
				
				else  /** LED 4 FAILED **/
				{
					enu_ledoff_state = APP_FAILURE ;/** RETURN APP FAILURE **/
 10a:	81 e0       	ldi	r24, 0x01	; 1
		enu_ledoff_state = APP_FAILURE ;/** RETURN APP FAILURE **/
	}
	
	
	return enu_ledoff_state ; /** RETURN THE FINAL STATUS **/
}
 10c:	08 95       	ret

0000010e <APP_init>:
enu_app_error_status_t APP_init(void)
{ 
	enu_app_error_status_t enu_l_appinit_status = APP_SUCCEED    ;    /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS  **/
	
	/** INITIALIZE THE GLOBAL VARIABLES TO ZERO **/
	u8_gl_button1_status = 0  ;  
 10e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <u8_gl_button1_status>
	u8_gl_button1_counter = 0 ;
 112:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	enu_l_appinit_status = LEDs_init();  /** INITIALIZE LEDS **/
 116:	0e 94 3e 00 	call	0x7c	; 0x7c <LEDs_init>
	
	if ( enu_l_appinit_status == APP_SUCCEED )
 11a:	81 11       	cpse	r24, r1
 11c:	07 c0       	rjmp	.+14     	; 0x12c <APP_init+0x1e>
	{
		enu_l_appinit_status = BTNs_init(); /** INITIALIZE BUTTONS **/
 11e:	0e 94 5f 00 	call	0xbe	; 0xbe <BTNs_init>
		
		if ( enu_l_appinit_status == APP_SUCCEED ) /** BUTTONS INITIALIZED SUCCESSFULLY **/
 122:	81 11       	cpse	r24, r1
 124:	05 c0       	rjmp	.+10     	; 0x130 <APP_init+0x22>
		{
		
			enu_l_appinit_status = LEDs_off();  /** INITIALIZE LEDS TO BE OFF **/
 126:	0e 94 66 00 	call	0xcc	; 0xcc <LEDs_off>
 12a:	08 95       	ret
		}
	}
	
	else  /** LEDs_init FAILED **/
	{
		enu_l_appinit_status = APP_FAILURE ; /** RETURN FAILURE **/
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret
			}
		}
		
		else  /** BTNs_init FAILED **/
		{
			enu_l_appinit_status = APP_FAILURE ; /** RETURN FAILURE **/
 130:	81 e0       	ldi	r24, 0x01	; 1
	{
		enu_l_appinit_status = APP_FAILURE ; /** RETURN FAILURE **/
	}
	
	return enu_l_appinit_status ; /** RETURN THE FINAL STATUS **/
}
 132:	08 95       	ret

00000134 <APP_start>:

/** MAIN LOGIC **/
void APP_start(void)
{
	BTN_ispressed(BUTTON1_PORT , BUTTON1_PIN , &u8_gl_button1_status);  /** GET THE STATUS OF THE BUTTON **/
 134:	41 e6       	ldi	r20, 0x61	; 97
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	64 e0       	ldi	r22, 0x04	; 4
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTN_ispressed>

	if (u8_gl_button1_status == BUTTON_PRESSED)    /** IF BUTTON IS PRESSED **/
 140:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <u8_gl_button1_status>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	09 f0       	breq	.+2      	; 0x14a <APP_start+0x16>
 148:	49 c0       	rjmp	.+146    	; 0x1dc <APP_start+0xa8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8b e4       	ldi	r24, 0x4B	; 75
 14c:	9d e1       	ldi	r25, 0x1D	; 29
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <APP_start+0x1a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <APP_start+0x20>
 154:	00 00       	nop
	{
		_delay_ms(30);     /** DELAY FOR 30 ms TO AVOID BOUNCING **/
		
		BTN_ispressed(BUTTON1_PORT , BUTTON1_PIN , &u8_gl_button1_status); /** GET THE STATUS OF THE BUTTON AGAIN **/
 156:	41 e6       	ldi	r20, 0x61	; 97
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	64 e0       	ldi	r22, 0x04	; 4
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTN_ispressed>
		
		if (u8_gl_button1_status == BUTTON_PRESSED)   /** IF STATE IS STILL 1 **/
 162:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <u8_gl_button1_status>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	c9 f5       	brne	.+114    	; 0x1dc <APP_start+0xa8>
		{
			u8_gl_button1_counter++ ;      /** UPDATE BUTTON 1 COUNTER **/
 16a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
			/** DISPLAY THE PATTERN ACCORDING TO THE NUMBER OF PRESS TIMES (COUNTER) */
			if (u8_gl_button1_counter == PATTERN_1)
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	19 f4       	brne	.+6      	; 0x17e <APP_start+0x4a>
			{
				LED_pattern1();
 178:	0e 94 21 01 	call	0x242	; 0x242 <LED_pattern1>
 17c:	2b c0       	rjmp	.+86     	; 0x1d4 <APP_start+0xa0>
			}
			
			else if(u8_gl_button1_counter == PATTERN_2)
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	19 f4       	brne	.+6      	; 0x188 <APP_start+0x54>
			{
				LED_pattern2();
 182:	0e 94 32 01 	call	0x264	; 0x264 <LED_pattern2>
 186:	26 c0       	rjmp	.+76     	; 0x1d4 <APP_start+0xa0>
			}
			
			else if(u8_gl_button1_counter == PATTERN_3)
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	19 f4       	brne	.+6      	; 0x192 <APP_start+0x5e>
			{
				LED_pattern3();
 18c:	0e 94 43 01 	call	0x286	; 0x286 <LED_pattern3>
 190:	21 c0       	rjmp	.+66     	; 0x1d4 <APP_start+0xa0>
			}
			
			else if(u8_gl_button1_counter == PATTERN_4)
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	19 f4       	brne	.+6      	; 0x19c <APP_start+0x68>
			{
				LED_pattern4();
 196:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_pattern4>
 19a:	1c c0       	rjmp	.+56     	; 0x1d4 <APP_start+0xa0>
			}
			
			else if(u8_gl_button1_counter == PATTERN_5)
 19c:	85 30       	cpi	r24, 0x05	; 5
 19e:	19 f4       	brne	.+6      	; 0x1a6 <APP_start+0x72>
			{
				LED_pattern5();
 1a0:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_pattern5>
 1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <APP_start+0xa0>
			}
			
			else if(u8_gl_button1_counter == PATTERN_6)
 1a6:	86 30       	cpi	r24, 0x06	; 6
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <APP_start+0x7c>
			{
				LED_pattern6();
 1aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <LED_pattern6>
 1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <APP_start+0xa0>
				
			}
			
			else if(u8_gl_button1_counter == PATTERN_7)
 1b0:	87 30       	cpi	r24, 0x07	; 7
 1b2:	19 f4       	brne	.+6      	; 0x1ba <APP_start+0x86>
			{
				LED_pattern7();
 1b4:	0e 94 87 01 	call	0x30e	; 0x30e <LED_pattern7>
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <APP_start+0xa0>
				
			}
			
			else if(u8_gl_button1_counter == PATTERN_8)
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <APP_start+0xa0>
			{
				LED_pattern8();
 1be:	0e 94 98 01 	call	0x330	; 0x330 <LED_pattern8>
				u8_gl_button1_counter = 0 ; /** REINITIALIZE THE COUNTER TO START FROM PATTERN 1 AGAIN */
 1c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <APP_start+0xa0>
			}
			
			while(u8_gl_button1_status)
			{
				BTN_ispressed(BUTTON1_PORT , BUTTON1_PIN , &u8_gl_button1_status);
 1c8:	41 e6       	ldi	r20, 0x61	; 97
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	64 e0       	ldi	r22, 0x04	; 4
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTN_ispressed>
			{
				LED_pattern8();
				u8_gl_button1_counter = 0 ; /** REINITIALIZE THE COUNTER TO START FROM PATTERN 1 AGAIN */
			}
			
			while(u8_gl_button1_status)
 1d4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <u8_gl_button1_status>
 1d8:	81 11       	cpse	r24, r1
 1da:	f6 cf       	rjmp	.-20     	; 0x1c8 <APP_start+0x94>
 1dc:	08 95       	ret

000001de <BTN_init>:
	
	enu_button_error_status_t  enu_l_btninit_state = BUTTON_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATE **/
	
	
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	enu_l_btnpin_state = DIO_setpindir(u8_a_button_port , u8_a_button_pin , DIO_PIN_INPUT);
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_setpindir>
	
	if ( enu_l_btnpin_state == DIO_SUCCEED )  /** BUTTON PIN INITIALIZED SUCCESSFULLY  **/
 1e4:	81 11       	cpse	r24, r1
		/** DO NOTHING **/
	}
	
	else
	{
		enu_l_btninit_state = BUTTON_FAILURE ;  /** RETURN BUTTON FAILURE  **/
 1e6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_l_btninit_state ;  /** RETURN THE FUNCTION FINAL STATE  **/
}
 1e8:	08 95       	ret

000001ea <BTN_ispressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PORT AND PIN                     */
/* RETURN    : enu_buttonerrorstatus_t                           */
/*****************************************************************/
enu_button_error_status_t BTN_ispressed(uint8_t u8_a_button_port , uint8_t u8_a_button_pin , uint8_t * u8_a_buttonstate)
{
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	1f 92       	push	r1
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	8a 01       	movw	r16, r20
	enu_button_error_status_t enu_l_btnispressed_state = BUTTON_SUCCEED ;   /** LOCAL VARIABLE TO RETURN THE FINCTION ERROR STATE **/
	
	enu_dio_error_status_t enu_l_btndiostate = DIO_SUCCEED ;              /** LOCAL VARIABLE TO RETURN THE BUTTON DIO STATE  **/
	
	uint8_t u8_l_buttonvalue = 0 ;     /** LOCAL VARIABLE TO GET THE BUTTON VALUE (0 / 1) **/
 1fa:	19 82       	std	Y+1, r1	; 0x01
	
	enu_l_btndiostate = DIO_readpin(u8_a_button_port , u8_a_button_pin , &u8_l_buttonvalue);  /** READ THE VALUE OF BUTTON'S PIN */
 1fc:	ae 01       	movw	r20, r28
 1fe:	4f 5f       	subi	r20, 0xFF	; 255
 200:	5f 4f       	sbci	r21, 0xFF	; 255
 202:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_readpin>
	
	if ( enu_l_btndiostate == DIO_SUCCEED ) 
 206:	81 11       	cpse	r24, r1
 208:	05 c0       	rjmp	.+10     	; 0x214 <BTN_ispressed+0x2a>
	{
		*u8_a_buttonstate = u8_l_buttonvalue ;   /** STORE THE VALUE OF PIN IN THE PASSED ARGUMENT **/
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	f8 01       	movw	r30, r16
 20e:	80 83       	st	Z, r24
/* ARGUMENTS : TAKES THE BUTTON PORT AND PIN                     */
/* RETURN    : enu_buttonerrorstatus_t                           */
/*****************************************************************/
enu_button_error_status_t BTN_ispressed(uint8_t u8_a_button_port , uint8_t u8_a_button_pin , uint8_t * u8_a_buttonstate)
{
	enu_button_error_status_t enu_l_btnispressed_state = BUTTON_SUCCEED ;   /** LOCAL VARIABLE TO RETURN THE FINCTION ERROR STATE **/
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	01 c0       	rjmp	.+2      	; 0x216 <BTN_ispressed+0x2c>
		*u8_a_buttonstate = u8_l_buttonvalue ;   /** STORE THE VALUE OF PIN IN THE PASSED ARGUMENT **/
	}
	
	else
	{
		enu_l_btnispressed_state = BUTTON_FAILURE ;  /** RETURN FAILURE **/
 214:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_l_btnispressed_state ;   /** RETURN THE STATUS OF BTN_ispressed FUNCTION **/
}
 216:	0f 90       	pop	r0
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <LED_init>:
{
	enu_dio_error_status_t enu_l_ledpin_status  = DIO_SUCCEED ;   /** LOCAL VARIABLE TO STORE THE RETURN ERROR STATUS OF LED DIO PIN **/
	
	enu_led_error_status_t enu_l_ledinit_status = LED_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/ 
	
	enu_l_ledpin_status = DIO_setpindir(u8_a_ledport , u8_a_ledpin , DIO_PIN_OUTPUT);  /** SET THE LED PIN AS OUTPUT **/
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_setpindir>
	
	else
	{
		enu_l_ledinit_status = LED_FAILURE ; /** RETUTN FAILURE **/
	}
}
 228:	08 95       	ret

0000022a <LED_on>:
{
	enu_dio_error_status_t enu_l_ledpin_status  = DIO_SUCCEED ;    /** LOCAL VARIABLE TO STORE THE RETURN ERROR STATUS OF LED DIO PIN **/
	
	enu_led_error_status_t enu_l_ledon_status   = LED_SUCCEED ;    /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/
	
	enu_l_ledpin_status = DIO_setpinvalue(u8_a_ledport , u8_a_ledpin , DIO_PIN_HIGH); /** SET THE OUTPUT PIN AS HIGH **/
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_setpinvalue>
	
	if ( enu_l_ledpin_status == DIO_SUCCEED )
 230:	81 11       	cpse	r24, r1
		/** DO NOTHING **/
	}
	
	else
	{
		enu_l_ledon_status  = LED_FAILURE ;  /** RETURN FAILURE **/
 232:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_l_ledon_status ;  /** RETURN THE FUNCTION FINAL STATUS **/
}
 234:	08 95       	ret

00000236 <LED_off>:
{
	enu_dio_error_status_t enu_l_ledpin_status  = DIO_SUCCEED ;    /** LOCAL VARIABLE TO STORE THE RETURN ERROR STATUS OF LED DIO PIN **/
	
	enu_led_error_status_t enu_l_ledoff_status   = LED_SUCCEED ;    /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/
	
	enu_l_ledpin_status = DIO_setpinvalue(u8_a_ledport , u8_a_ledpin , DIO_PIN_LOW); /** SET THE OUTPUT PIN AS LOW **/
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_setpinvalue>
	
	if ( enu_l_ledpin_status == DIO_SUCCEED )
 23c:	81 11       	cpse	r24, r1
		/** DO NOTHING **/
	}
	
	else
	{
		enu_l_ledoff_status = LED_FAILURE ; /** RETURN FAILURE **/
 23e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_l_ledoff_status ;  /** RETURN THE FUNCTION FINAL STATUS **/
}
 240:	08 95       	ret

00000242 <LED_pattern1>:

/** PATTERNS TO BE DISPLAYED */
void LED_pattern1(void)
{
	/** LED1 ON **/
	LED_on(LED1_PORT , LED1_PIN);
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_off(LED2_PORT , LED2_PIN);
 24a:	67 e0       	ldi	r22, 0x07	; 7
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_off(LED3_PORT , LED3_PIN);
 252:	63 e0       	ldi	r22, 0x03	; 3
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_off(LED4_PORT , LED4_PIN);
 25a:	64 e0       	ldi	r22, 0x04	; 4
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
 262:	08 95       	ret

00000264 <LED_pattern2>:
}

void LED_pattern2(void)
{
	/** LED1 AND LED2 ARE ON **/
	LED_on(LED1_PORT , LED1_PIN);
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_on(LED2_PORT , LED2_PIN);
 26c:	67 e0       	ldi	r22, 0x07	; 7
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_off(LED3_PORT , LED3_PIN);
 274:	63 e0       	ldi	r22, 0x03	; 3
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_off(LED4_PORT , LED4_PIN);
 27c:	64 e0       	ldi	r22, 0x04	; 4
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
 284:	08 95       	ret

00000286 <LED_pattern3>:
}

void LED_pattern3(void)
{
	/** LED1 , LED2 AND LED3 ARE ON **/
	LED_on(LED1_PORT , LED1_PIN);
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_on(LED2_PORT , LED2_PIN);
 28e:	67 e0       	ldi	r22, 0x07	; 7
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_on(LED3_PORT , LED3_PIN);
 296:	63 e0       	ldi	r22, 0x03	; 3
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_off(LED4_PORT , LED4_PIN);
 29e:	64 e0       	ldi	r22, 0x04	; 4
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
 2a6:	08 95       	ret

000002a8 <LED_pattern4>:
}

void LED_pattern4(void)
{
	/** LED 1 , LED 2 , LED 3 AND LED 4 ARE ON **/
	LED_on(LED1_PORT , LED1_PIN);
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_on(LED2_PORT , LED2_PIN);
 2b0:	67 e0       	ldi	r22, 0x07	; 7
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_on(LED3_PORT , LED3_PIN);
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_on(LED4_PORT , LED4_PIN);
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
 2c8:	08 95       	ret

000002ca <LED_pattern5>:
}

void LED_pattern5(void)
{
	/** LED 4 IS OFF **/
	LED_off(LED1_PORT , LED1_PIN);
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_on(LED2_PORT , LED2_PIN);
 2d2:	67 e0       	ldi	r22, 0x07	; 7
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_on(LED3_PORT , LED3_PIN);
 2da:	63 e0       	ldi	r22, 0x03	; 3
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_on(LED4_PORT , LED4_PIN);
 2e2:	64 e0       	ldi	r22, 0x04	; 4
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
 2ea:	08 95       	ret

000002ec <LED_pattern6>:
}

void LED_pattern6(void)
{
	/** LED 4 AND LED 3 ARE OFF **/
	LED_off(LED1_PORT , LED1_PIN);
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_off(LED2_PORT , LED2_PIN);
 2f4:	67 e0       	ldi	r22, 0x07	; 7
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_on(LED3_PORT , LED3_PIN);
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
	LED_on(LED4_PORT , LED4_PIN);
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
 30c:	08 95       	ret

0000030e <LED_pattern7>:
}

void LED_pattern7(void)
{
	/** LED 4 AND LED 3 , LED 2 ARE OFF **/
	LED_off(LED1_PORT , LED1_PIN);
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_off(LED2_PORT , LED2_PIN);
 316:	67 e0       	ldi	r22, 0x07	; 7
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_off(LED3_PORT , LED3_PIN);
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_on(LED4_PORT , LED4_PIN);
 326:	64 e0       	ldi	r22, 0x04	; 4
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0e 94 15 01 	call	0x22a	; 0x22a <LED_on>
 32e:	08 95       	ret

00000330 <LED_pattern8>:
}

void LED_pattern8(void)
{
    /** ALL LEDS ARE OFF **/
	LED_off(LED1_PORT , LED1_PIN);
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_off(LED2_PORT , LED2_PIN);
 338:	67 e0       	ldi	r22, 0x07	; 7
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_off(LED3_PORT , LED3_PIN);
 340:	63 e0       	ldi	r22, 0x03	; 3
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
	LED_off(LED4_PORT , LED4_PIN);	
 348:	64 e0       	ldi	r22, 0x04	; 4
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off>
 350:	08 95       	ret

00000352 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init();
 352:	0e 94 87 00 	call	0x10e	; 0x10e <APP_init>
   
    while (1) 
    {
		APP_start();
 356:	0e 94 9a 00 	call	0x134	; 0x134 <APP_start>
 35a:	fd cf       	rjmp	.-6      	; 0x356 <main+0x4>

0000035c <DIO_setpindir>:
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir)            /** SWITCH CASE ON THE DIRECTION VALUE **/
 35c:	44 23       	and	r20, r20
 35e:	19 f0       	breq	.+6      	; 0x366 <DIO_setpindir+0xa>
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	e9 f1       	breq	.+122    	; 0x3de <DIO_setpindir+0x82>
 364:	74 c0       	rjmp	.+232    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
	{
		case DIO_PIN_INPUT:        /** INPUT CASE  **/
		{
			switch(u8_a_portid)    /** SWITCH CASE ON THE PORT ID **/
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	99 f0       	breq	.+38     	; 0x390 <DIO_setpindir+0x34>
 36a:	28 f0       	brcs	.+10     	; 0x376 <DIO_setpindir+0x1a>
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	e9 f0       	breq	.+58     	; 0x3aa <DIO_setpindir+0x4e>
 370:	83 30       	cpi	r24, 0x03	; 3
 372:	41 f1       	breq	.+80     	; 0x3c4 <DIO_setpindir+0x68>
 374:	6e c0       	rjmp	.+220    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			{
				case DIO_PORTA:
				clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 376:	2a b3       	in	r18, 0x1a	; 26
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_setpindir+0x26>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_setpindir+0x22>
 386:	80 95       	com	r24
 388:	82 23       	and	r24, r18
 38a:	8a bb       	out	0x1a, r24	; 26
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 38c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)    /** SWITCH CASE ON THE PORT ID **/
			{
				case DIO_PORTA:
				clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
				break ;
 38e:	08 95       	ret
				
				case DIO_PORTB:
				clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 390:	27 b3       	in	r18, 0x17	; 23
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_setpindir+0x40>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_setpindir+0x3c>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	87 bb       	out	0x17, r24	; 23
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3a6:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
				break ;
				
				case DIO_PORTB:
				clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
				break ;
 3a8:	08 95       	ret
				
				case DIO_PORTC:
				clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 3aa:	24 b3       	in	r18, 0x14	; 20
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_setpindir+0x5a>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_setpindir+0x56>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	84 bb       	out	0x14, r24	; 20
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3c0:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
				break ;
				
				case DIO_PORTC:
				clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
				break ;
 3c2:	08 95       	ret
				
				case DIO_PORTD:
				clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 3c4:	21 b3       	in	r18, 0x11	; 17
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_setpindir+0x74>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_setpindir+0x70>
 3d4:	80 95       	com	r24
 3d6:	82 23       	and	r24, r18
 3d8:	81 bb       	out	0x11, r24	; 17
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3da:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
				break ;
				
				case DIO_PORTD:
				clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
				break ;
 3dc:	08 95       	ret
		}
		
		
		case DIO_PIN_OUTPUT:              /** OUTPUT CASE  **/
		{
			switch(u8_a_portid)           /** SWITCH CASE ON THE PORT ID */
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	91 f0       	breq	.+36     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3e2:	28 f0       	brcs	.+10     	; 0x3ee <DIO_setpindir+0x92>
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	d9 f0       	breq	.+54     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	29 f1       	breq	.+74     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3ec:	34 c0       	rjmp	.+104    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			{
				case DIO_PORTA:
				set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 3ee:	2a b3       	in	r18, 0x1a	; 26
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_setpindir+0x9e>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_setpindir+0x9a>
 3fe:	82 2b       	or	r24, r18
 400:	8a bb       	out	0x1a, r24	; 26
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 402:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)           /** SWITCH CASE ON THE PORT ID */
			{
				case DIO_PORTA:
				set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
 404:	08 95       	ret
				
				case DIO_PORTB:
				set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 406:	27 b3       	in	r18, 0x17	; 23
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	82 2b       	or	r24, r18
 418:	87 bb       	out	0x17, r24	; 23
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 41a:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				case DIO_PORTB:
				set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
 41c:	08 95       	ret
				
				case DIO_PORTC:
				set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 41e:	24 b3       	in	r18, 0x14	; 20
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	84 bb       	out	0x14, r24	; 20
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 432:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				case DIO_PORTC:
				set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
 434:	08 95       	ret
				
				case DIO_PORTD:
				set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 436:	21 b3       	in	r18, 0x11	; 17
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	82 2b       	or	r24, r18
 448:	81 bb       	out	0x11, r24	; 17
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 44a:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				case DIO_PORTD:
				set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
 44c:	08 95       	ret
		}
		
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		
		enu_l_setpindir_state = DIO_FAILURE ; /** RETURN AS DIR NOT VALID ERRORS **/
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	08 95       	ret
				case DIO_PORTD:
				clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
				break ;
				
				default: 
				enu_l_setpindir_state = DIO_FAILURE ;   /** RETURN AS DIR NOT VALID ERRORS **/
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	08 95       	ret
				case DIO_PORTD:
				set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				default:  
				enu_l_setpindir_state = DIO_FAILURE ; /** RETURN AS DIR NOT VALID ERRORS **/
 456:	81 e0       	ldi	r24, 0x01	; 1
		
		break ; 
	} 
	
	return enu_l_setpindir_state ; /** RETURN THE STATE OF FUNCTION **/
}
 458:	08 95       	ret

0000045a <DIO_setpinvalue>:
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 45a:	44 23       	and	r20, r20
 45c:	19 f0       	breq	.+6      	; 0x464 <DIO_setpinvalue+0xa>
 45e:	41 30       	cpi	r20, 0x01	; 1
 460:	e9 f1       	breq	.+122    	; 0x4dc <DIO_setpinvalue+0x82>
 462:	74 c0       	rjmp	.+232    	; 0x54c <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:            /** IN CASE PIN VALUE IS LOW  **/
		{
			switch(u8_a_portid)     /** SWITCH CASE ON THE PORT ID **/
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	99 f0       	breq	.+38     	; 0x48e <DIO_setpinvalue+0x34>
 468:	28 f0       	brcs	.+10     	; 0x474 <DIO_setpinvalue+0x1a>
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	e9 f0       	breq	.+58     	; 0x4a8 <DIO_setpinvalue+0x4e>
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	41 f1       	breq	.+80     	; 0x4c2 <DIO_setpinvalue+0x68>
 472:	6e c0       	rjmp	.+220    	; 0x550 <DIO_setpinvalue+0xf6>
			{
				case DIO_PORTA:
				clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 474:	2b b3       	in	r18, 0x1b	; 27
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_setpinvalue+0x26>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_setpinvalue+0x22>
 484:	80 95       	com	r24
 486:	82 23       	and	r24, r18
 488:	8b bb       	out	0x1b, r24	; 27
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 48a:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)     /** SWITCH CASE ON THE PORT ID **/
			{
				case DIO_PORTA:
				clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
 48c:	08 95       	ret
				
				case DIO_PORTB:
				clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 48e:	28 b3       	in	r18, 0x18	; 24
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_setpinvalue+0x40>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_setpinvalue+0x3c>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	88 bb       	out	0x18, r24	; 24
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4a4:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				case DIO_PORTB:
				clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
 4a6:	08 95       	ret
				
				case DIO_PORTC:
				clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 4a8:	25 b3       	in	r18, 0x15	; 21
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_setpinvalue+0x5a>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_setpinvalue+0x56>
 4b8:	80 95       	com	r24
 4ba:	82 23       	and	r24, r18
 4bc:	85 bb       	out	0x15, r24	; 21
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4be:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				case DIO_PORTC:
				clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
 4c0:	08 95       	ret
				
				case DIO_PORTD:
				clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 4c2:	22 b3       	in	r18, 0x12	; 18
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_setpinvalue+0x74>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_setpinvalue+0x70>
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	82 bb       	out	0x12, r24	; 18
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4d8:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				case DIO_PORTD:
				clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
 4da:	08 95       	ret
		}
		
		
		case DIO_PIN_HIGH:        /** IN CASE PIN VALUE IS HIGH **/
		{
			switch(u8_a_portid)   /** SWITCH CASE ON THE PORT ID **/
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	91 f0       	breq	.+36     	; 0x504 <DIO_setpinvalue+0xaa>
 4e0:	28 f0       	brcs	.+10     	; 0x4ec <DIO_setpinvalue+0x92>
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	d9 f0       	breq	.+54     	; 0x51c <DIO_setpinvalue+0xc2>
 4e6:	83 30       	cpi	r24, 0x03	; 3
 4e8:	29 f1       	breq	.+74     	; 0x534 <DIO_setpinvalue+0xda>
 4ea:	34 c0       	rjmp	.+104    	; 0x554 <DIO_setpinvalue+0xfa>
			{
				case DIO_PORTA:
				set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 4ec:	2b b3       	in	r18, 0x1b	; 27
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_setpinvalue+0x9e>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_setpinvalue+0x9a>
 4fc:	82 2b       	or	r24, r18
 4fe:	8b bb       	out	0x1b, r24	; 27
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 500:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)   /** SWITCH CASE ON THE PORT ID **/
			{
				case DIO_PORTA:
				set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
 502:	08 95       	ret
				
				case DIO_PORTB:
				set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 504:	28 b3       	in	r18, 0x18	; 24
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_setpinvalue+0xb6>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_setpinvalue+0xb2>
 514:	82 2b       	or	r24, r18
 516:	88 bb       	out	0x18, r24	; 24
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 518:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				case DIO_PORTB:
				set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
 51a:	08 95       	ret
				
				case DIO_PORTC:
				set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 51c:	25 b3       	in	r18, 0x15	; 21
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_setpinvalue+0xce>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_setpinvalue+0xca>
 52c:	82 2b       	or	r24, r18
 52e:	85 bb       	out	0x15, r24	; 21
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 530:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				case DIO_PORTC:
				set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
 532:	08 95       	ret
				
				case DIO_PORTD:
				set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_setpinvalue+0xe6>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_setpinvalue+0xe2>
 544:	82 2b       	or	r24, r18
 546:	82 bb       	out	0x12, r24	; 18
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 548:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				case DIO_PORTD:
				set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
 54a:	08 95       	ret
			break ;   /** BREAK OF DIO_PIN_HIGH CASE **/
		}
		
		
		default :
		enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	08 95       	ret
				case DIO_PORTD:
				clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				default:
				enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	08 95       	ret
				case DIO_PORTD:
				set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				default:
				enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
 554:	81 e0       	ldi	r24, 0x01	; 1
		enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return enu_l_setpinval_state ;    /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
 556:	08 95       	ret

00000558 <DIO_readpin>:
/******************************************************************/
enu_dio_error_status_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_retval)
{
	enu_dio_error_status_t enu_l_readpin_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO HOLD THE FUNCTION ERROR STATE **/
	
	switch(u8_a_portid)      /** SWITCH CASE ON PORT ID **/
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	99 f0       	breq	.+38     	; 0x582 <DIO_readpin+0x2a>
 55c:	28 f0       	brcs	.+10     	; 0x568 <DIO_readpin+0x10>
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	e9 f0       	breq	.+58     	; 0x59c <DIO_readpin+0x44>
 562:	83 30       	cpi	r24, 0x03	; 3
 564:	41 f1       	breq	.+80     	; 0x5b6 <DIO_readpin+0x5e>
 566:	34 c0       	rjmp	.+104    	; 0x5d0 <DIO_readpin+0x78>
	{
		case DIO_PORTA:     
		*u8_a_retval = get_bit(PINA , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
 568:	89 b3       	in	r24, 0x19	; 25
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_readpin+0x1a>
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_readpin+0x16>
 576:	81 70       	andi	r24, 0x01	; 1
 578:	89 bb       	out	0x19, r24	; 25
 57a:	fa 01       	movw	r30, r20
 57c:	80 83       	st	Z, r24
/* INPUT   : PORTID , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
enu_dio_error_status_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_retval)
{
	enu_dio_error_status_t enu_l_readpin_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO HOLD THE FUNCTION ERROR STATE **/
 57e:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)      /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:     
		*u8_a_retval = get_bit(PINA , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
		break ;
 580:	08 95       	ret
		
		case DIO_PORTB:      
		*u8_a_retval = get_bit(PINB , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
 582:	86 b3       	in	r24, 0x16	; 22
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_readpin+0x34>
 588:	95 95       	asr	r25
 58a:	87 95       	ror	r24
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_readpin+0x30>
 590:	81 70       	andi	r24, 0x01	; 1
 592:	86 bb       	out	0x16, r24	; 22
 594:	fa 01       	movw	r30, r20
 596:	80 83       	st	Z, r24
/* INPUT   : PORTID , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
enu_dio_error_status_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_retval)
{
	enu_dio_error_status_t enu_l_readpin_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO HOLD THE FUNCTION ERROR STATE **/
 598:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_retval = get_bit(PINA , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
		break ;
		
		case DIO_PORTB:      
		*u8_a_retval = get_bit(PINB , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
		break ;
 59a:	08 95       	ret
		
		case DIO_PORTC:    
		*u8_a_retval = get_bit(PINC , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
 59c:	83 b3       	in	r24, 0x13	; 19
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_readpin+0x4e>
 5a2:	95 95       	asr	r25
 5a4:	87 95       	ror	r24
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_readpin+0x4a>
 5aa:	81 70       	andi	r24, 0x01	; 1
 5ac:	83 bb       	out	0x13, r24	; 19
 5ae:	fa 01       	movw	r30, r20
 5b0:	80 83       	st	Z, r24
/* INPUT   : PORTID , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
enu_dio_error_status_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_retval)
{
	enu_dio_error_status_t enu_l_readpin_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO HOLD THE FUNCTION ERROR STATE **/
 5b2:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_retval = get_bit(PINB , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
		break ;
		
		case DIO_PORTC:    
		*u8_a_retval = get_bit(PINC , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
		break ;
 5b4:	08 95       	ret
		
		case DIO_PORTD:      
		*u8_a_retval = get_bit(PIND , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
 5b6:	80 b3       	in	r24, 0x10	; 16
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_readpin+0x68>
 5bc:	95 95       	asr	r25
 5be:	87 95       	ror	r24
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_readpin+0x64>
 5c4:	81 70       	andi	r24, 0x01	; 1
 5c6:	80 bb       	out	0x10, r24	; 16
 5c8:	fa 01       	movw	r30, r20
 5ca:	80 83       	st	Z, r24
/* INPUT   : PORTID , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
enu_dio_error_status_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_retval)
{
	enu_dio_error_status_t enu_l_readpin_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO HOLD THE FUNCTION ERROR STATE **/
 5cc:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_retval = get_bit(PINC , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
		break ;
		
		case DIO_PORTD:      
		*u8_a_retval = get_bit(PIND , u8_a_pinid);   /** GET THE VALUE OF THE BIT **/
		break ;
 5ce:	08 95       	ret
		
		default:
		enu_l_readpin_state = DIO_FAILURE ;         /**      READ IS NOT VALID    **/
 5d0:	81 e0       	ldi	r24, 0x01	; 1
		break ;
	} 
	
	return enu_l_readpin_state ;          /** RETURN THE FINAL STATE OF THE FUNCTION **/	
 5d2:	08 95       	ret

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
