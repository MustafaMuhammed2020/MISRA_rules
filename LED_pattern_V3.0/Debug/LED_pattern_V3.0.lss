
LED_pattern_V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00001254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e0a  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b2  00000000  00000000  00004222  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c9  00000000  00000000  00004ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00005ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071f  00000000  00000000  00005f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000575  00000000  00000000  00006623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006b98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__vector_1>
       8:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__vector_2>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 36       	cpi	r26, 0x67	; 103
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
      74:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_init>:
{
	enu_dio_error_status_t enu_l_ledpin_status  = DIO_SUCCEED ;   /** LOCAL VARIABLE TO STORE THE RETURN ERROR STATUS OF LED DIO PIN **/
	
	enu_led_error_status_t enu_l_ledinit_status = LED_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/ 
	
	enu_l_ledpin_status = DIO_setpindir(u8_a_ledport , u8_a_ledpin , DIO_PIN_OUTPUT);  /** SET THE LED PIN AS OUTPUT **/
      7c:	41 e0       	ldi	r20, 0x01	; 1
      7e:	0e 94 23 06 	call	0xc46	; 0xc46 <DIO_setpindir>
	
	else
	{
		enu_l_ledinit_status = LED_FAILURE ; /** RETUTN FAILURE **/
	}
}
      82:	08 95       	ret

00000084 <LED_on>:
{
	enu_dio_error_status_t enu_l_ledpin_status  = DIO_SUCCEED ;    /** LOCAL VARIABLE TO STORE THE RETURN ERROR STATUS OF LED DIO PIN **/
	
	enu_led_error_status_t enu_l_ledon_status   = LED_SUCCEED ;    /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/
	
	enu_l_ledpin_status = DIO_setpinvalue(u8_a_ledport , u8_a_ledpin , DIO_PIN_HIGH); /** SET THE OUTPUT PIN AS HIGH **/
      84:	41 e0       	ldi	r20, 0x01	; 1
      86:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_setpinvalue>
	
	if ( enu_l_ledpin_status == DIO_SUCCEED )
      8a:	81 11       	cpse	r24, r1
		/** DO NOTHING **/
	}
	
	else
	{
		enu_l_ledon_status  = LED_FAILURE ;  /** RETURN FAILURE **/
      8c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_l_ledon_status ;  /** RETURN THE FUNCTION FINAL STATUS **/
}
      8e:	08 95       	ret

00000090 <LED_off>:
{
	enu_dio_error_status_t enu_l_ledpin_status  = DIO_SUCCEED ;    /** LOCAL VARIABLE TO STORE THE RETURN ERROR STATUS OF LED DIO PIN **/
	
	enu_led_error_status_t enu_l_ledoff_status   = LED_SUCCEED ;    /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/
	
	enu_l_ledpin_status = DIO_setpinvalue(u8_a_ledport , u8_a_ledpin , DIO_PIN_LOW); /** SET THE OUTPUT PIN AS LOW **/
      90:	40 e0       	ldi	r20, 0x00	; 0
      92:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_setpinvalue>
	
	if ( enu_l_ledpin_status == DIO_SUCCEED )
      96:	81 11       	cpse	r24, r1
		/** DO NOTHING **/
	}
	
	else
	{
		enu_l_ledoff_status = LED_FAILURE ; /** RETURN FAILURE **/
      98:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_l_ledoff_status ;  /** RETURN THE FUNCTION FINAL STATUS **/
}
      9a:	08 95       	ret

0000009c <main>:


int main(void)
{
	/** INITIALIZE THE LEDS **/
	LED_init(LED1_PORT , LED1_PIN);
      9c:	62 e0       	ldi	r22, 0x02	; 2
      9e:	82 e0       	ldi	r24, 0x02	; 2
      a0:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_init>
	LED_init(LED2_PORT , LED2_PIN);
      a4:	63 e0       	ldi	r22, 0x03	; 3
      a6:	82 e0       	ldi	r24, 0x02	; 2
      a8:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_init>
	LED_init(LED3_PORT , LED3_PIN);
      ac:	64 e0       	ldi	r22, 0x04	; 4
      ae:	82 e0       	ldi	r24, 0x02	; 2
      b0:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_init>
	LED_init(LED4_PORT , LED4_PIN);
      b4:	65 e0       	ldi	r22, 0x05	; 5
      b6:	82 e0       	ldi	r24, 0x02	; 2
      b8:	0e 94 3e 00 	call	0x7c	; 0x7c <LED_init>
	
	/** LEDs ARE OFF AS INITIAL STATE **/
	LED_off(LED1_PORT , LED1_PIN);
      bc:	62 e0       	ldi	r22, 0x02	; 2
      be:	82 e0       	ldi	r24, 0x02	; 2
      c0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
	LED_off(LED2_PORT , LED2_PIN);
      c4:	63 e0       	ldi	r22, 0x03	; 3
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
	LED_off(LED3_PORT , LED3_PIN);
      cc:	64 e0       	ldi	r22, 0x04	; 4
      ce:	82 e0       	ldi	r24, 0x02	; 2
      d0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
	LED_off(LED4_PORT , LED4_PIN);
      d4:	65 e0       	ldi	r22, 0x05	; 5
      d6:	82 e0       	ldi	r24, 0x02	; 2
      d8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
	
	
	TMR0_init(); /** INITIALIZE TMR0 **/
      dc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <TMR0_init>
	
	EXTINT0_init(); /** INITIALIZE INT0 **/
      e0:	0e 94 25 07 	call	0xe4a	; 0xe4a <EXTINT0_init>
	
	EXTINT1_init(); /** INITIALIZE INT  **/
      e4:	0e 94 31 07 	call	0xe62	; 0xe62 <EXTINT1_init>
	
	while (1)
	{
		
		if (LED_mode >= 8)  /** RETURN TO LED MODE 0 AGAIN **/
      e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      ec:	88 30       	cpi	r24, 0x08	; 8
      ee:	10 f0       	brcs	.+4      	; 0xf4 <main+0x58>
		{
			LED_mode =  0;
      f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		
		if (blinking_mode >= 5) /** RETURN TO BLINKING MODE 0 AGAIN **/
      f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <blinking_mode>
      f8:	85 30       	cpi	r24, 0x05	; 5
      fa:	10 f0       	brcs	.+4      	; 0x100 <main+0x64>
		{
			blinking_mode = 0 ;
      fc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <blinking_mode>
		}
		
		
		switch (blinking_mode)  /** SWICH CASE ON BLINKING MODE **/
     100:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <blinking_mode>
     104:	82 30       	cpi	r24, 0x02	; 2
     106:	09 f4       	brne	.+2      	; 0x10a <main+0x6e>
     108:	3a c2       	rjmp	.+1140   	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
     10a:	30 f4       	brcc	.+12     	; 0x118 <main+0x7c>
     10c:	88 23       	and	r24, r24
     10e:	59 f0       	breq	.+22     	; 0x126 <main+0x8a>
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	09 f4       	brne	.+2      	; 0x116 <main+0x7a>
     114:	1e c1       	rjmp	.+572    	; 0x352 <main+0x2b6>
     116:	e8 cf       	rjmp	.-48     	; 0xe8 <main+0x4c>
     118:	83 30       	cpi	r24, 0x03	; 3
     11a:	09 f4       	brne	.+2      	; 0x11e <main+0x82>
     11c:	46 c3       	rjmp	.+1676   	; 0x7aa <__EEPROM_REGION_LENGTH__+0x3aa>
     11e:	84 30       	cpi	r24, 0x04	; 4
     120:	09 f4       	brne	.+2      	; 0x124 <main+0x88>
     122:	59 c4       	rjmp	.+2226   	; 0x9d6 <__stack+0x177>
     124:	e1 cf       	rjmp	.-62     	; 0xe8 <main+0x4c>
		{
			case 0 :
			
			if (LED_mode == 0) /** ALL LEDs ARE OFF **/
     126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     12a:	81 11       	cpse	r24, r1
     12c:	11 c0       	rjmp	.+34     	; 0x150 <main+0xb4>
			{
				LED_off(LED1_PORT , LED1_PIN);
     12e:	62 e0       	ldi	r22, 0x02	; 2
     130:	82 e0       	ldi	r24, 0x02	; 2
     132:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     136:	63 e0       	ldi	r22, 0x03	; 3
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     13e:	64 e0       	ldi	r22, 0x04	; 4
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     146:	65 e0       	ldi	r22, 0x05	; 5
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
     14e:	cc cf       	rjmp	.-104    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 1) /** LED 1 IS BLINKING **/
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	a9 f4       	brne	.+42     	; 0x17e <main+0xe2>
			{
				LED_on(LED1_PORT , LED1_PIN);
     154:	62 e0       	ldi	r22, 0x02	; 2
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(100);
     15c:	64 e6       	ldi	r22, 0x64	; 100
     15e:	70 e0       	ldi	r23, 0x00	; 0
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     168:	62 e0       	ldi	r22, 0x02	; 2
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(900);
     170:	64 e8       	ldi	r22, 0x84	; 132
     172:	73 e0       	ldi	r23, 0x03	; 3
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     17c:	b5 cf       	rjmp	.-150    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 2) /** LED 1 , 2 ARE BLINKING **/
     17e:	82 30       	cpi	r24, 0x02	; 2
     180:	e1 f4       	brne	.+56     	; 0x1ba <main+0x11e>
			{
				LED_on(LED1_PORT , LED1_PIN);
     182:	62 e0       	ldi	r22, 0x02	; 2
     184:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     188:	63 e0       	ldi	r22, 0x03	; 3
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(100);
     190:	64 e6       	ldi	r22, 0x64	; 100
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     19c:	62 e0       	ldi	r22, 0x02	; 2
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     1a4:	63 e0       	ldi	r22, 0x03	; 3
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(900);
     1ac:	64 e8       	ldi	r22, 0x84	; 132
     1ae:	73 e0       	ldi	r23, 0x03	; 3
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     1b8:	97 cf       	rjmp	.-210    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 3) /** LED 1 , 2 , 3  ARE BLINKING **/
     1ba:	83 30       	cpi	r24, 0x03	; 3
     1bc:	29 f5       	brne	.+74     	; 0x208 <main+0x16c>
			{
				LED_on(LED1_PORT , LED1_PIN);
     1be:	62 e0       	ldi	r22, 0x02	; 2
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     1c6:	63 e0       	ldi	r22, 0x03	; 3
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     1ce:	64 e0       	ldi	r22, 0x04	; 4
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(100);
     1d6:	64 e6       	ldi	r22, 0x64	; 100
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     1e2:	62 e0       	ldi	r22, 0x02	; 2
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     1ea:	63 e0       	ldi	r22, 0x03	; 3
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     1f2:	64 e0       	ldi	r22, 0x04	; 4
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(900);
     1fa:	64 e8       	ldi	r22, 0x84	; 132
     1fc:	73 e0       	ldi	r23, 0x03	; 3
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     206:	70 cf       	rjmp	.-288    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 4) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     208:	84 30       	cpi	r24, 0x04	; 4
     20a:	69 f5       	brne	.+90     	; 0x266 <main+0x1ca>
			{
				LED_on(LED1_PORT , LED1_PIN);
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     214:	63 e0       	ldi	r22, 0x03	; 3
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     21c:	64 e0       	ldi	r22, 0x04	; 4
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     224:	65 e0       	ldi	r22, 0x05	; 5
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(100);
     22c:	64 e6       	ldi	r22, 0x64	; 100
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     238:	62 e0       	ldi	r22, 0x02	; 2
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     240:	63 e0       	ldi	r22, 0x03	; 3
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     248:	64 e0       	ldi	r22, 0x04	; 4
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     250:	65 e0       	ldi	r22, 0x05	; 5
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(900);
     258:	64 e8       	ldi	r22, 0x84	; 132
     25a:	73 e0       	ldi	r23, 0x03	; 3
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     264:	41 cf       	rjmp	.-382    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 5) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     266:	85 30       	cpi	r24, 0x05	; 5
     268:	49 f5       	brne	.+82     	; 0x2bc <main+0x220>
			{
				LED_off(LED1_PORT , LED1_PIN);
     26a:	62 e0       	ldi	r22, 0x02	; 2
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     272:	63 e0       	ldi	r22, 0x03	; 3
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     27a:	64 e0       	ldi	r22, 0x04	; 4
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     282:	65 e0       	ldi	r22, 0x05	; 5
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(100);
     28a:	64 e6       	ldi	r22, 0x64	; 100
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     296:	63 e0       	ldi	r22, 0x03	; 3
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     29e:	64 e0       	ldi	r22, 0x04	; 4
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     2a6:	65 e0       	ldi	r22, 0x05	; 5
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(900);
     2ae:	64 e8       	ldi	r22, 0x84	; 132
     2b0:	73 e0       	ldi	r23, 0x03	; 3
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     2ba:	16 cf       	rjmp	.-468    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 6) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     2bc:	86 30       	cpi	r24, 0x06	; 6
     2be:	29 f5       	brne	.+74     	; 0x30a <main+0x26e>
			{
				LED_off(LED1_PORT , LED1_PIN);
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     2c8:	63 e0       	ldi	r22, 0x03	; 3
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     2d0:	64 e0       	ldi	r22, 0x04	; 4
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     2d8:	65 e0       	ldi	r22, 0x05	; 5
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(100);
     2e0:	64 e6       	ldi	r22, 0x64	; 100
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     2ec:	64 e0       	ldi	r22, 0x04	; 4
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     2f4:	65 e0       	ldi	r22, 0x05	; 5
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(900);
     2fc:	64 e8       	ldi	r22, 0x84	; 132
     2fe:	73 e0       	ldi	r23, 0x03	; 3
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     308:	ef ce       	rjmp	.-546    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 7) /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     30a:	87 30       	cpi	r24, 0x07	; 7
     30c:	09 f0       	breq	.+2      	; 0x310 <main+0x274>
     30e:	ec ce       	rjmp	.-552    	; 0xe8 <main+0x4c>
			{
				LED_off(LED1_PORT , LED1_PIN);
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     318:	63 e0       	ldi	r22, 0x03	; 3
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     320:	64 e0       	ldi	r22, 0x04	; 4
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     328:	65 e0       	ldi	r22, 0x05	; 5
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(100);
     330:	64 e6       	ldi	r22, 0x64	; 100
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     33c:	65 e0       	ldi	r22, 0x05	; 5
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(900);
     344:	64 e8       	ldi	r22, 0x84	; 132
     346:	73 e0       	ldi	r23, 0x03	; 3
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     350:	cb ce       	rjmp	.-618    	; 0xe8 <main+0x4c>
			
			break ;
			
			case 1 :
			
			if (LED_mode == 0) /** ALL LEDs ARE OFF **/
     352:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     356:	81 11       	cpse	r24, r1
     358:	11 c0       	rjmp	.+34     	; 0x37c <main+0x2e0>
			{
				LED_off(LED1_PORT , LED1_PIN);
     35a:	62 e0       	ldi	r22, 0x02	; 2
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     362:	63 e0       	ldi	r22, 0x03	; 3
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     36a:	64 e0       	ldi	r22, 0x04	; 4
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     372:	65 e0       	ldi	r22, 0x05	; 5
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
     37a:	b6 ce       	rjmp	.-660    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 1) /** LED 1 IS BLINKING **/
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	a9 f4       	brne	.+42     	; 0x3aa <main+0x30e>
			{
				LED_on(LED1_PORT , LED1_PIN);
     380:	62 e0       	ldi	r22, 0x02	; 2
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(200);
     388:	68 ec       	ldi	r22, 0xC8	; 200
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     394:	62 e0       	ldi	r22, 0x02	; 2
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(800);
     39c:	60 e2       	ldi	r22, 0x20	; 32
     39e:	73 e0       	ldi	r23, 0x03	; 3
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     3a8:	9f ce       	rjmp	.-706    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 2) /** LED 1 , 2 ARE BLINKING **/
     3aa:	82 30       	cpi	r24, 0x02	; 2
     3ac:	e1 f4       	brne	.+56     	; 0x3e6 <main+0x34a>
			{
				LED_on(LED1_PORT , LED1_PIN);
     3ae:	62 e0       	ldi	r22, 0x02	; 2
     3b0:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     3b4:	63 e0       	ldi	r22, 0x03	; 3
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(200);
     3bc:	68 ec       	ldi	r22, 0xC8	; 200
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     3d0:	63 e0       	ldi	r22, 0x03	; 3
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(800);
     3d8:	60 e2       	ldi	r22, 0x20	; 32
     3da:	73 e0       	ldi	r23, 0x03	; 3
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     3e4:	81 ce       	rjmp	.-766    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 3) /** LED 1 , 2 , 3  ARE BLINKING **/
     3e6:	83 30       	cpi	r24, 0x03	; 3
     3e8:	29 f5       	brne	.+74     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			{
				LED_on(LED1_PORT , LED1_PIN);
     3ea:	62 e0       	ldi	r22, 0x02	; 2
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     3f2:	63 e0       	ldi	r22, 0x03	; 3
     3f4:	82 e0       	ldi	r24, 0x02	; 2
     3f6:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     3fa:	64 e0       	ldi	r22, 0x04	; 4
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(200);
     402:	68 ec       	ldi	r22, 0xC8	; 200
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     40e:	62 e0       	ldi	r22, 0x02	; 2
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     416:	63 e0       	ldi	r22, 0x03	; 3
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     41e:	64 e0       	ldi	r22, 0x04	; 4
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(800);
     426:	60 e2       	ldi	r22, 0x20	; 32
     428:	73 e0       	ldi	r23, 0x03	; 3
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     432:	5a ce       	rjmp	.-844    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 4) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     434:	84 30       	cpi	r24, 0x04	; 4
     436:	69 f5       	brne	.+90     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
			{
				LED_on(LED1_PORT , LED1_PIN);
     438:	62 e0       	ldi	r22, 0x02	; 2
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     440:	63 e0       	ldi	r22, 0x03	; 3
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     448:	64 e0       	ldi	r22, 0x04	; 4
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     450:	65 e0       	ldi	r22, 0x05	; 5
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(200);
     458:	68 ec       	ldi	r22, 0xC8	; 200
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     464:	62 e0       	ldi	r22, 0x02	; 2
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     46c:	63 e0       	ldi	r22, 0x03	; 3
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     474:	64 e0       	ldi	r22, 0x04	; 4
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     47c:	65 e0       	ldi	r22, 0x05	; 5
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(800);
     484:	60 e2       	ldi	r22, 0x20	; 32
     486:	73 e0       	ldi	r23, 0x03	; 3
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     490:	2b ce       	rjmp	.-938    	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 5) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     492:	85 30       	cpi	r24, 0x05	; 5
     494:	49 f5       	brne	.+82     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
			{
				LED_off(LED1_PORT , LED1_PIN);
     496:	62 e0       	ldi	r22, 0x02	; 2
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     49e:	63 e0       	ldi	r22, 0x03	; 3
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     4a6:	64 e0       	ldi	r22, 0x04	; 4
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     4ae:	65 e0       	ldi	r22, 0x05	; 5
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(200);
     4b6:	68 ec       	ldi	r22, 0xC8	; 200
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     4ca:	64 e0       	ldi	r22, 0x04	; 4
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     4d2:	65 e0       	ldi	r22, 0x05	; 5
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(800);
     4da:	60 e2       	ldi	r22, 0x20	; 32
     4dc:	73 e0       	ldi	r23, 0x03	; 3
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     4e6:	00 ce       	rjmp	.-1024   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 6) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     4e8:	86 30       	cpi	r24, 0x06	; 6
     4ea:	29 f5       	brne	.+74     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
			{
				LED_off(LED1_PORT , LED1_PIN);
     4ec:	62 e0       	ldi	r22, 0x02	; 2
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     4f4:	63 e0       	ldi	r22, 0x03	; 3
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     4fc:	64 e0       	ldi	r22, 0x04	; 4
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     504:	65 e0       	ldi	r22, 0x05	; 5
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(200);
     50c:	68 ec       	ldi	r22, 0xC8	; 200
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     518:	64 e0       	ldi	r22, 0x04	; 4
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     520:	65 e0       	ldi	r22, 0x05	; 5
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(800);
     528:	60 e2       	ldi	r22, 0x20	; 32
     52a:	73 e0       	ldi	r23, 0x03	; 3
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     534:	d9 cd       	rjmp	.-1102   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 7) /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     536:	87 30       	cpi	r24, 0x07	; 7
     538:	09 f0       	breq	.+2      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     53a:	d6 cd       	rjmp	.-1108   	; 0xe8 <main+0x4c>
			{
				LED_off(LED1_PORT , LED1_PIN);
     53c:	62 e0       	ldi	r22, 0x02	; 2
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     544:	63 e0       	ldi	r22, 0x03	; 3
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     54c:	64 e0       	ldi	r22, 0x04	; 4
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     554:	65 e0       	ldi	r22, 0x05	; 5
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(200);
     55c:	68 ec       	ldi	r22, 0xC8	; 200
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     568:	65 e0       	ldi	r22, 0x05	; 5
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(800);
     570:	60 e2       	ldi	r22, 0x20	; 32
     572:	73 e0       	ldi	r23, 0x03	; 3
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     57c:	b5 cd       	rjmp	.-1174   	; 0xe8 <main+0x4c>
			}
			break ;
			
			case 2 :
			
			if (LED_mode == 0) /** ALL LEDs ARE OFF **/
     57e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     582:	81 11       	cpse	r24, r1
     584:	11 c0       	rjmp	.+34     	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
			{
				LED_off(LED1_PORT , LED1_PIN);
     586:	62 e0       	ldi	r22, 0x02	; 2
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     58e:	63 e0       	ldi	r22, 0x03	; 3
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     596:	64 e0       	ldi	r22, 0x04	; 4
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     59e:	65 e0       	ldi	r22, 0x05	; 5
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
     5a6:	a0 cd       	rjmp	.-1216   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 1) /** LED 1 IS BLINKING **/
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	a9 f4       	brne	.+42     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
			{
				LED_on(LED1_PORT , LED1_PIN);
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(300);
     5b4:	6c e2       	ldi	r22, 0x2C	; 44
     5b6:	71 e0       	ldi	r23, 0x01	; 1
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     5c0:	62 e0       	ldi	r22, 0x02	; 2
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(700);
     5c8:	6c eb       	ldi	r22, 0xBC	; 188
     5ca:	72 e0       	ldi	r23, 0x02	; 2
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     5d4:	89 cd       	rjmp	.-1262   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 2) /** LED 1 , 2 ARE BLINKING **/
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	e1 f4       	brne	.+56     	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
			{
				LED_on(LED1_PORT , LED1_PIN);
     5da:	62 e0       	ldi	r22, 0x02	; 2
     5dc:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     5e0:	63 e0       	ldi	r22, 0x03	; 3
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(300);
     5e8:	6c e2       	ldi	r22, 0x2C	; 44
     5ea:	71 e0       	ldi	r23, 0x01	; 1
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     5f4:	62 e0       	ldi	r22, 0x02	; 2
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     5fc:	63 e0       	ldi	r22, 0x03	; 3
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(700);
     604:	6c eb       	ldi	r22, 0xBC	; 188
     606:	72 e0       	ldi	r23, 0x02	; 2
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     610:	6b cd       	rjmp	.-1322   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 3) /** LED 1 , 2 , 3  ARE BLINKING **/
     612:	83 30       	cpi	r24, 0x03	; 3
     614:	29 f5       	brne	.+74     	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
			{
				LED_on(LED1_PORT , LED1_PIN);
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     61e:	63 e0       	ldi	r22, 0x03	; 3
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     626:	64 e0       	ldi	r22, 0x04	; 4
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(300);
     62e:	6c e2       	ldi	r22, 0x2C	; 44
     630:	71 e0       	ldi	r23, 0x01	; 1
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     63a:	62 e0       	ldi	r22, 0x02	; 2
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     642:	63 e0       	ldi	r22, 0x03	; 3
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     64a:	64 e0       	ldi	r22, 0x04	; 4
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(700);
     652:	6c eb       	ldi	r22, 0xBC	; 188
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     65e:	44 cd       	rjmp	.-1400   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 4) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     660:	84 30       	cpi	r24, 0x04	; 4
     662:	69 f5       	brne	.+90     	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
			{
				LED_on(LED1_PORT , LED1_PIN);
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     66c:	63 e0       	ldi	r22, 0x03	; 3
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     674:	64 e0       	ldi	r22, 0x04	; 4
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     67c:	65 e0       	ldi	r22, 0x05	; 5
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(300);
     684:	6c e2       	ldi	r22, 0x2C	; 44
     686:	71 e0       	ldi	r23, 0x01	; 1
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     698:	63 e0       	ldi	r22, 0x03	; 3
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     6a0:	64 e0       	ldi	r22, 0x04	; 4
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     6a8:	65 e0       	ldi	r22, 0x05	; 5
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(700);
     6b0:	6c eb       	ldi	r22, 0xBC	; 188
     6b2:	72 e0       	ldi	r23, 0x02	; 2
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     6bc:	15 cd       	rjmp	.-1494   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 5) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     6be:	85 30       	cpi	r24, 0x05	; 5
     6c0:	49 f5       	brne	.+82     	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
			{
				LED_off(LED1_PORT , LED1_PIN);
     6c2:	62 e0       	ldi	r22, 0x02	; 2
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     6ca:	63 e0       	ldi	r22, 0x03	; 3
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     6d2:	64 e0       	ldi	r22, 0x04	; 4
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     6da:	65 e0       	ldi	r22, 0x05	; 5
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(300);
     6e2:	6c e2       	ldi	r22, 0x2C	; 44
     6e4:	71 e0       	ldi	r23, 0x01	; 1
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     6ee:	63 e0       	ldi	r22, 0x03	; 3
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     6f6:	64 e0       	ldi	r22, 0x04	; 4
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     6fe:	65 e0       	ldi	r22, 0x05	; 5
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(700);
     706:	6c eb       	ldi	r22, 0xBC	; 188
     708:	72 e0       	ldi	r23, 0x02	; 2
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     712:	ea cc       	rjmp	.-1580   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 6) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     714:	86 30       	cpi	r24, 0x06	; 6
     716:	29 f5       	brne	.+74     	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
			{
				LED_off(LED1_PORT , LED1_PIN);
     718:	62 e0       	ldi	r22, 0x02	; 2
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     728:	64 e0       	ldi	r22, 0x04	; 4
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     730:	65 e0       	ldi	r22, 0x05	; 5
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(300);
     738:	6c e2       	ldi	r22, 0x2C	; 44
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     744:	64 e0       	ldi	r22, 0x04	; 4
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     74c:	65 e0       	ldi	r22, 0x05	; 5
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(700);
     754:	6c eb       	ldi	r22, 0xBC	; 188
     756:	72 e0       	ldi	r23, 0x02	; 2
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     760:	c3 cc       	rjmp	.-1658   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 7) /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     762:	87 30       	cpi	r24, 0x07	; 7
     764:	09 f0       	breq	.+2      	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
     766:	c0 cc       	rjmp	.-1664   	; 0xe8 <main+0x4c>
			{
				LED_off(LED1_PORT , LED1_PIN);
     768:	62 e0       	ldi	r22, 0x02	; 2
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     770:	63 e0       	ldi	r22, 0x03	; 3
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     778:	64 e0       	ldi	r22, 0x04	; 4
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     780:	65 e0       	ldi	r22, 0x05	; 5
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(300);
     788:	6c e2       	ldi	r22, 0x2C	; 44
     78a:	71 e0       	ldi	r23, 0x01	; 1
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     794:	65 e0       	ldi	r22, 0x05	; 5
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(700);
     79c:	6c eb       	ldi	r22, 0xBC	; 188
     79e:	72 e0       	ldi	r23, 0x02	; 2
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     7a8:	9f cc       	rjmp	.-1730   	; 0xe8 <main+0x4c>
			}
			break ;
			
			case 3 :
			
			if (LED_mode == 0) /** ALL LEDs ARE OFF **/
     7aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7ae:	81 11       	cpse	r24, r1
     7b0:	11 c0       	rjmp	.+34     	; 0x7d4 <__EEPROM_REGION_LENGTH__+0x3d4>
			{
				LED_off(LED1_PORT , LED1_PIN);
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     7ba:	63 e0       	ldi	r22, 0x03	; 3
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     7c2:	64 e0       	ldi	r22, 0x04	; 4
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     7ca:	65 e0       	ldi	r22, 0x05	; 5
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
     7d2:	8a cc       	rjmp	.-1772   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 1) /** LED 1 IS BLINKING **/
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	a9 f4       	brne	.+42     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			{
				LED_on(LED1_PORT , LED1_PIN);
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(500);
     7e0:	64 ef       	ldi	r22, 0xF4	; 244
     7e2:	71 e0       	ldi	r23, 0x01	; 1
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     7ec:	62 e0       	ldi	r22, 0x02	; 2
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(500);
     7f4:	64 ef       	ldi	r22, 0xF4	; 244
     7f6:	71 e0       	ldi	r23, 0x01	; 1
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     800:	73 cc       	rjmp	.-1818   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 2) /** LED 1 , 2 ARE BLINKING **/
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	e1 f4       	brne	.+56     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
			{
				LED_on(LED1_PORT , LED1_PIN);
     806:	62 e0       	ldi	r22, 0x02	; 2
     808:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     80c:	63 e0       	ldi	r22, 0x03	; 3
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(500);
     814:	64 ef       	ldi	r22, 0xF4	; 244
     816:	71 e0       	ldi	r23, 0x01	; 1
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     820:	62 e0       	ldi	r22, 0x02	; 2
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     828:	63 e0       	ldi	r22, 0x03	; 3
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(500);
     830:	64 ef       	ldi	r22, 0xF4	; 244
     832:	71 e0       	ldi	r23, 0x01	; 1
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     83c:	55 cc       	rjmp	.-1878   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 3) /** LED 1 , 2 , 3  ARE BLINKING **/
     83e:	83 30       	cpi	r24, 0x03	; 3
     840:	29 f5       	brne	.+74     	; 0x88c <__stack+0x2d>
			{
				LED_on(LED1_PORT , LED1_PIN);
     842:	62 e0       	ldi	r22, 0x02	; 2
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     84a:	63 e0       	ldi	r22, 0x03	; 3
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     852:	64 e0       	ldi	r22, 0x04	; 4
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(500);
     85a:	64 ef       	ldi	r22, 0xF4	; 244
     85c:	71 e0       	ldi	r23, 0x01	; 1
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     86e:	63 e0       	ldi	r22, 0x03	; 3
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     876:	64 e0       	ldi	r22, 0x04	; 4
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(500);
     87e:	64 ef       	ldi	r22, 0xF4	; 244
     880:	71 e0       	ldi	r23, 0x01	; 1
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     88a:	2e cc       	rjmp	.-1956   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 4) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     88c:	84 30       	cpi	r24, 0x04	; 4
     88e:	69 f5       	brne	.+90     	; 0x8ea <__stack+0x8b>
			{
				LED_on(LED1_PORT , LED1_PIN);
     890:	62 e0       	ldi	r22, 0x02	; 2
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     898:	63 e0       	ldi	r22, 0x03	; 3
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     8a0:	64 e0       	ldi	r22, 0x04	; 4
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     8a8:	65 e0       	ldi	r22, 0x05	; 5
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(500);
     8b0:	64 ef       	ldi	r22, 0xF4	; 244
     8b2:	71 e0       	ldi	r23, 0x01	; 1
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     8bc:	62 e0       	ldi	r22, 0x02	; 2
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     8c4:	63 e0       	ldi	r22, 0x03	; 3
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     8cc:	64 e0       	ldi	r22, 0x04	; 4
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     8d4:	65 e0       	ldi	r22, 0x05	; 5
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(500);
     8dc:	64 ef       	ldi	r22, 0xF4	; 244
     8de:	71 e0       	ldi	r23, 0x01	; 1
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     8e8:	ff cb       	rjmp	.-2050   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 5) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     8ea:	85 30       	cpi	r24, 0x05	; 5
     8ec:	49 f5       	brne	.+82     	; 0x940 <__stack+0xe1>
			{
				LED_off(LED1_PORT , LED1_PIN);
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     8f6:	63 e0       	ldi	r22, 0x03	; 3
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     8fe:	64 e0       	ldi	r22, 0x04	; 4
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     906:	65 e0       	ldi	r22, 0x05	; 5
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(500);
     90e:	64 ef       	ldi	r22, 0xF4	; 244
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     91a:	63 e0       	ldi	r22, 0x03	; 3
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     922:	64 e0       	ldi	r22, 0x04	; 4
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     92a:	65 e0       	ldi	r22, 0x05	; 5
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(500);
     932:	64 ef       	ldi	r22, 0xF4	; 244
     934:	71 e0       	ldi	r23, 0x01	; 1
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     93e:	d4 cb       	rjmp	.-2136   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 6) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     940:	86 30       	cpi	r24, 0x06	; 6
     942:	29 f5       	brne	.+74     	; 0x98e <__stack+0x12f>
			{
				LED_off(LED1_PORT , LED1_PIN);
     944:	62 e0       	ldi	r22, 0x02	; 2
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     94c:	63 e0       	ldi	r22, 0x03	; 3
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     954:	64 e0       	ldi	r22, 0x04	; 4
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     95c:	65 e0       	ldi	r22, 0x05	; 5
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(500);
     964:	64 ef       	ldi	r22, 0xF4	; 244
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     970:	64 e0       	ldi	r22, 0x04	; 4
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     978:	65 e0       	ldi	r22, 0x05	; 5
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(500);
     980:	64 ef       	ldi	r22, 0xF4	; 244
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     98c:	ad cb       	rjmp	.-2214   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 7) /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     98e:	87 30       	cpi	r24, 0x07	; 7
     990:	09 f0       	breq	.+2      	; 0x994 <__stack+0x135>
     992:	aa cb       	rjmp	.-2220   	; 0xe8 <main+0x4c>
			{
				LED_off(LED1_PORT , LED1_PIN);
     994:	62 e0       	ldi	r22, 0x02	; 2
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     99c:	63 e0       	ldi	r22, 0x03	; 3
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     9a4:	64 e0       	ldi	r22, 0x04	; 4
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     9ac:	65 e0       	ldi	r22, 0x05	; 5
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(500);
     9b4:	64 ef       	ldi	r22, 0xF4	; 244
     9b6:	71 e0       	ldi	r23, 0x01	; 1
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     9c0:	65 e0       	ldi	r22, 0x05	; 5
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(500);
     9c8:	64 ef       	ldi	r22, 0xF4	; 244
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     9d4:	89 cb       	rjmp	.-2286   	; 0xe8 <main+0x4c>
			}
			break;
			
			case 4 :
			
			if (LED_mode == 0) /** ALL LEDs ARE OFF **/
     9d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9da:	81 11       	cpse	r24, r1
     9dc:	11 c0       	rjmp	.+34     	; 0xa00 <__stack+0x1a1>
			{
				LED_off(LED1_PORT , LED1_PIN);
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     9e6:	63 e0       	ldi	r22, 0x03	; 3
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     9ee:	64 e0       	ldi	r22, 0x04	; 4
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     9f6:	65 e0       	ldi	r22, 0x05	; 5
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
     9fe:	74 cb       	rjmp	.-2328   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 1) /** LED 1 IS BLINKING **/
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	a9 f4       	brne	.+42     	; 0xa2e <__stack+0x1cf>
			{
				LED_on(LED1_PORT , LED1_PIN);
     a04:	62 e0       	ldi	r22, 0x02	; 2
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(800);
     a0c:	60 e2       	ldi	r22, 0x20	; 32
     a0e:	73 e0       	ldi	r23, 0x03	; 3
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     a18:	62 e0       	ldi	r22, 0x02	; 2
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(200);
     a20:	68 ec       	ldi	r22, 0xC8	; 200
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     a2c:	5d cb       	rjmp	.-2374   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 2) /** LED 1 , 2 ARE BLINKING **/
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	e1 f4       	brne	.+56     	; 0xa6a <__stack+0x20b>
			{
				LED_on(LED1_PORT , LED1_PIN);
     a32:	62 e0       	ldi	r22, 0x02	; 2
     a34:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     a38:	63 e0       	ldi	r22, 0x03	; 3
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(800);
     a40:	60 e2       	ldi	r22, 0x20	; 32
     a42:	73 e0       	ldi	r23, 0x03	; 3
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     a54:	63 e0       	ldi	r22, 0x03	; 3
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(200);
     a5c:	68 ec       	ldi	r22, 0xC8	; 200
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     a68:	3f cb       	rjmp	.-2434   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 3) /** LED 1 , 2 , 3  ARE BLINKING **/
     a6a:	83 30       	cpi	r24, 0x03	; 3
     a6c:	29 f5       	brne	.+74     	; 0xab8 <__stack+0x259>
			{
				LED_on(LED1_PORT , LED1_PIN);
     a6e:	62 e0       	ldi	r22, 0x02	; 2
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     a76:	63 e0       	ldi	r22, 0x03	; 3
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     a7e:	64 e0       	ldi	r22, 0x04	; 4
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(800);
     a86:	60 e2       	ldi	r22, 0x20	; 32
     a88:	73 e0       	ldi	r23, 0x03	; 3
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     a92:	62 e0       	ldi	r22, 0x02	; 2
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     a9a:	63 e0       	ldi	r22, 0x03	; 3
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     aa2:	64 e0       	ldi	r22, 0x04	; 4
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(200);
     aaa:	68 ec       	ldi	r22, 0xC8	; 200
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     ab6:	18 cb       	rjmp	.-2512   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 4) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     ab8:	84 30       	cpi	r24, 0x04	; 4
     aba:	69 f5       	brne	.+90     	; 0xb16 <__stack+0x2b7>
			{
				LED_on(LED1_PORT , LED1_PIN);
     abc:	62 e0       	ldi	r22, 0x02	; 2
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     ac4:	63 e0       	ldi	r22, 0x03	; 3
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     acc:	64 e0       	ldi	r22, 0x04	; 4
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     ad4:	65 e0       	ldi	r22, 0x05	; 5
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(800);
     adc:	60 e2       	ldi	r22, 0x20	; 32
     ade:	73 e0       	ldi	r23, 0x03	; 3
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     ae8:	62 e0       	ldi	r22, 0x02	; 2
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     af0:	63 e0       	ldi	r22, 0x03	; 3
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     af8:	64 e0       	ldi	r22, 0x04	; 4
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     b00:	65 e0       	ldi	r22, 0x05	; 5
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(200);
     b08:	68 ec       	ldi	r22, 0xC8	; 200
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     b14:	e9 ca       	rjmp	.-2606   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 5) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     b16:	85 30       	cpi	r24, 0x05	; 5
     b18:	49 f5       	brne	.+82     	; 0xb6c <__stack+0x30d>
			{
				LED_off(LED1_PORT , LED1_PIN);
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     b22:	63 e0       	ldi	r22, 0x03	; 3
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     b2a:	64 e0       	ldi	r22, 0x04	; 4
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     b32:	65 e0       	ldi	r22, 0x05	; 5
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(800);
     b3a:	60 e2       	ldi	r22, 0x20	; 32
     b3c:	73 e0       	ldi	r23, 0x03	; 3
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     b46:	63 e0       	ldi	r22, 0x03	; 3
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     b4e:	64 e0       	ldi	r22, 0x04	; 4
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     b56:	65 e0       	ldi	r22, 0x05	; 5
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(200);
     b5e:	68 ec       	ldi	r22, 0xC8	; 200
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     b6a:	be ca       	rjmp	.-2692   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 6) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     b6c:	86 30       	cpi	r24, 0x06	; 6
     b6e:	29 f5       	brne	.+74     	; 0xbba <__stack+0x35b>
			{
				LED_off(LED1_PORT , LED1_PIN);
     b70:	62 e0       	ldi	r22, 0x02	; 2
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     b78:	63 e0       	ldi	r22, 0x03	; 3
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     b80:	64 e0       	ldi	r22, 0x04	; 4
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     b88:	65 e0       	ldi	r22, 0x05	; 5
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(800);
     b90:	60 e2       	ldi	r22, 0x20	; 32
     b92:	73 e0       	ldi	r23, 0x03	; 3
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     b9c:	64 e0       	ldi	r22, 0x04	; 4
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     ba4:	65 e0       	ldi	r22, 0x05	; 5
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(200);
     bac:	68 ec       	ldi	r22, 0xC8	; 200
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     bb8:	97 ca       	rjmp	.-2770   	; 0xe8 <main+0x4c>
			}
			
			else if(LED_mode == 7) /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     bba:	87 30       	cpi	r24, 0x07	; 7
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <__stack+0x361>
     bbe:	94 ca       	rjmp	.-2776   	; 0xe8 <main+0x4c>
			{
				LED_off(LED1_PORT , LED1_PIN);
     bc0:	62 e0       	ldi	r22, 0x02	; 2
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     bc8:	63 e0       	ldi	r22, 0x03	; 3
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     bd0:	64 e0       	ldi	r22, 0x04	; 4
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     bd8:	65 e0       	ldi	r22, 0x05	; 5
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	0e 94 42 00 	call	0x84	; 0x84 <LED_on>
				TMR0_delay_ms(800);
     be0:	60 e2       	ldi	r22, 0x20	; 32
     be2:	73 e0       	ldi	r23, 0x03	; 3
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     bec:	65 e0       	ldi	r22, 0x05	; 5
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	0e 94 48 00 	call	0x90	; 0x90 <LED_off>
				TMR0_delay_ms(200);
     bf4:	68 ec       	ldi	r22, 0xC8	; 200
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 69 07 	call	0xed2	; 0xed2 <TMR0_delay_ms>
     c00:	73 ca       	rjmp	.-2842   	; 0xe8 <main+0x4c>

00000c02 <__vector_1>:
}


/** ISR OF INT0  **/
ISR(INT0_vect)
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	8f 93       	push	r24
	blinking_mode++ ; /** CHANGE THE BLINKING MODE **/
     c0e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <blinking_mode>
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <blinking_mode>
}
     c18:	8f 91       	pop	r24
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <__vector_2>:

/** ISR OF INT1 **/
ISR(INT1_vect)
{
     c24:	1f 92       	push	r1
     c26:	0f 92       	push	r0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	0f 92       	push	r0
     c2c:	11 24       	eor	r1, r1
     c2e:	8f 93       	push	r24
	LED_mode++ ;  /** CHANGE THE LEDs **/
     c30:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     c3a:	8f 91       	pop	r24
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti

00000c46 <DIO_setpindir>:
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir)            /** SWITCH CASE ON THE DIRECTION VALUE **/
     c46:	44 23       	and	r20, r20
     c48:	19 f0       	breq	.+6      	; 0xc50 <DIO_setpindir+0xa>
     c4a:	41 30       	cpi	r20, 0x01	; 1
     c4c:	e9 f1       	breq	.+122    	; 0xcc8 <DIO_setpindir+0x82>
     c4e:	74 c0       	rjmp	.+232    	; 0xd38 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:        /** INPUT CASE  **/
		{
			switch(u8_a_portid)    /** SWITCH CASE ON THE PORT ID **/
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	99 f0       	breq	.+38     	; 0xc7a <DIO_setpindir+0x34>
     c54:	28 f0       	brcs	.+10     	; 0xc60 <DIO_setpindir+0x1a>
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	e9 f0       	breq	.+58     	; 0xc94 <DIO_setpindir+0x4e>
     c5a:	83 30       	cpi	r24, 0x03	; 3
     c5c:	41 f1       	breq	.+80     	; 0xcae <DIO_setpindir+0x68>
     c5e:	6e c0       	rjmp	.+220    	; 0xd3c <DIO_setpindir+0xf6>
			{
				case DIO_PORTA:
				clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     c60:	2a b3       	in	r18, 0x1a	; 26
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_setpindir+0x26>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	6a 95       	dec	r22
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <DIO_setpindir+0x22>
     c70:	80 95       	com	r24
     c72:	82 23       	and	r24, r18
     c74:	8a bb       	out	0x1a, r24	; 26
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     c76:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)    /** SWITCH CASE ON THE PORT ID **/
			{
				case DIO_PORTA:
				clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
				break ;
     c78:	08 95       	ret
				
				case DIO_PORTB:
				clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     c7a:	27 b3       	in	r18, 0x17	; 23
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_setpindir+0x40>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	6a 95       	dec	r22
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_setpindir+0x3c>
     c8a:	80 95       	com	r24
     c8c:	82 23       	and	r24, r18
     c8e:	87 bb       	out	0x17, r24	; 23
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     c90:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
				break ;
				
				case DIO_PORTB:
				clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
				break ;
     c92:	08 95       	ret
				
				case DIO_PORTC:
				clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     c94:	24 b3       	in	r18, 0x14	; 20
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_setpindir+0x5a>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	6a 95       	dec	r22
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <DIO_setpindir+0x56>
     ca4:	80 95       	com	r24
     ca6:	82 23       	and	r24, r18
     ca8:	84 bb       	out	0x14, r24	; 20
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     caa:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
				break ;
				
				case DIO_PORTC:
				clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
				break ;
     cac:	08 95       	ret
				
				case DIO_PORTD:
				clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     cae:	21 b3       	in	r18, 0x11	; 17
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_setpindir+0x74>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	6a 95       	dec	r22
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <DIO_setpindir+0x70>
     cbe:	80 95       	com	r24
     cc0:	82 23       	and	r24, r18
     cc2:	81 bb       	out	0x11, r24	; 17
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     cc4:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
				break ;
				
				case DIO_PORTD:
				clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
				break ;
     cc6:	08 95       	ret
		}
		
		
		case DIO_PIN_OUTPUT:              /** OUTPUT CASE  **/
		{
			switch(u8_a_portid)           /** SWITCH CASE ON THE PORT ID */
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	91 f0       	breq	.+36     	; 0xcf0 <DIO_setpindir+0xaa>
     ccc:	28 f0       	brcs	.+10     	; 0xcd8 <DIO_setpindir+0x92>
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	d9 f0       	breq	.+54     	; 0xd08 <DIO_setpindir+0xc2>
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	29 f1       	breq	.+74     	; 0xd20 <DIO_setpindir+0xda>
     cd6:	34 c0       	rjmp	.+104    	; 0xd40 <DIO_setpindir+0xfa>
			{
				case DIO_PORTA:
				set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     cd8:	2a b3       	in	r18, 0x1a	; 26
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <DIO_setpindir+0x9e>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	6a 95       	dec	r22
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <DIO_setpindir+0x9a>
     ce8:	82 2b       	or	r24, r18
     cea:	8a bb       	out	0x1a, r24	; 26
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     cec:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)           /** SWITCH CASE ON THE PORT ID */
			{
				case DIO_PORTA:
				set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
     cee:	08 95       	ret
				
				case DIO_PORTB:
				set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     cf0:	27 b3       	in	r18, 0x17	; 23
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_setpindir+0xb6>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	6a 95       	dec	r22
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_setpindir+0xb2>
     d00:	82 2b       	or	r24, r18
     d02:	87 bb       	out	0x17, r24	; 23
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d04:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				case DIO_PORTB:
				set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
     d06:	08 95       	ret
				
				case DIO_PORTC:
				set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     d08:	24 b3       	in	r18, 0x14	; 20
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_setpindir+0xce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	6a 95       	dec	r22
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_setpindir+0xca>
     d18:	82 2b       	or	r24, r18
     d1a:	84 bb       	out	0x14, r24	; 20
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d1c:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				case DIO_PORTC:
				set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
     d1e:	08 95       	ret
				
				case DIO_PORTD:
				set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     d20:	21 b3       	in	r18, 0x11	; 17
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_setpindir+0xe6>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	6a 95       	dec	r22
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_setpindir+0xe2>
     d30:	82 2b       	or	r24, r18
     d32:	81 bb       	out	0x11, r24	; 17
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d34:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				case DIO_PORTD:
				set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
     d36:	08 95       	ret
		}
		
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		
		enu_l_setpindir_state = DIO_FAILURE ; /** RETURN AS DIR NOT VALID ERRORS **/
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	08 95       	ret
				case DIO_PORTD:
				clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
				break ;
				
				default: 
				enu_l_setpindir_state = DIO_FAILURE ;   /** RETURN AS DIR NOT VALID ERRORS **/
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	08 95       	ret
				case DIO_PORTD:
				set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				default:  
				enu_l_setpindir_state = DIO_FAILURE ; /** RETURN AS DIR NOT VALID ERRORS **/
     d40:	81 e0       	ldi	r24, 0x01	; 1
		
		break ; 
	} 
	
	return enu_l_setpindir_state ; /** RETURN THE STATE OF FUNCTION **/
}
     d42:	08 95       	ret

00000d44 <DIO_setpinvalue>:
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     d44:	44 23       	and	r20, r20
     d46:	19 f0       	breq	.+6      	; 0xd4e <DIO_setpinvalue+0xa>
     d48:	41 30       	cpi	r20, 0x01	; 1
     d4a:	e9 f1       	breq	.+122    	; 0xdc6 <DIO_setpinvalue+0x82>
     d4c:	74 c0       	rjmp	.+232    	; 0xe36 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:            /** IN CASE PIN VALUE IS LOW  **/
		{
			switch(u8_a_portid)     /** SWITCH CASE ON THE PORT ID **/
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	99 f0       	breq	.+38     	; 0xd78 <DIO_setpinvalue+0x34>
     d52:	28 f0       	brcs	.+10     	; 0xd5e <DIO_setpinvalue+0x1a>
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	e9 f0       	breq	.+58     	; 0xd92 <DIO_setpinvalue+0x4e>
     d58:	83 30       	cpi	r24, 0x03	; 3
     d5a:	41 f1       	breq	.+80     	; 0xdac <DIO_setpinvalue+0x68>
     d5c:	6e c0       	rjmp	.+220    	; 0xe3a <DIO_setpinvalue+0xf6>
			{
				case DIO_PORTA:
				clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     d5e:	2b b3       	in	r18, 0x1b	; 27
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_setpinvalue+0x26>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	6a 95       	dec	r22
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_setpinvalue+0x22>
     d6e:	80 95       	com	r24
     d70:	82 23       	and	r24, r18
     d72:	8b bb       	out	0x1b, r24	; 27
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     d74:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)     /** SWITCH CASE ON THE PORT ID **/
			{
				case DIO_PORTA:
				clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
     d76:	08 95       	ret
				
				case DIO_PORTB:
				clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     d78:	28 b3       	in	r18, 0x18	; 24
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_setpinvalue+0x40>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	6a 95       	dec	r22
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_setpinvalue+0x3c>
     d88:	80 95       	com	r24
     d8a:	82 23       	and	r24, r18
     d8c:	88 bb       	out	0x18, r24	; 24
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     d8e:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				case DIO_PORTB:
				clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
     d90:	08 95       	ret
				
				case DIO_PORTC:
				clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     d92:	25 b3       	in	r18, 0x15	; 21
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_setpinvalue+0x5a>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	6a 95       	dec	r22
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_setpinvalue+0x56>
     da2:	80 95       	com	r24
     da4:	82 23       	and	r24, r18
     da6:	85 bb       	out	0x15, r24	; 21
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     da8:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				case DIO_PORTC:
				clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
     daa:	08 95       	ret
				
				case DIO_PORTD:
				clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     dac:	22 b3       	in	r18, 0x12	; 18
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_setpinvalue+0x74>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	6a 95       	dec	r22
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_setpinvalue+0x70>
     dbc:	80 95       	com	r24
     dbe:	82 23       	and	r24, r18
     dc0:	82 bb       	out	0x12, r24	; 18
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     dc2:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				case DIO_PORTD:
				clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
     dc4:	08 95       	ret
		}
		
		
		case DIO_PIN_HIGH:        /** IN CASE PIN VALUE IS HIGH **/
		{
			switch(u8_a_portid)   /** SWITCH CASE ON THE PORT ID **/
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	91 f0       	breq	.+36     	; 0xdee <DIO_setpinvalue+0xaa>
     dca:	28 f0       	brcs	.+10     	; 0xdd6 <DIO_setpinvalue+0x92>
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	d9 f0       	breq	.+54     	; 0xe06 <DIO_setpinvalue+0xc2>
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	29 f1       	breq	.+74     	; 0xe1e <DIO_setpinvalue+0xda>
     dd4:	34 c0       	rjmp	.+104    	; 0xe3e <DIO_setpinvalue+0xfa>
			{
				case DIO_PORTA:
				set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     dd6:	2b b3       	in	r18, 0x1b	; 27
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <DIO_setpinvalue+0x9e>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	6a 95       	dec	r22
     de4:	e2 f7       	brpl	.-8      	; 0xdde <DIO_setpinvalue+0x9a>
     de6:	82 2b       	or	r24, r18
     de8:	8b bb       	out	0x1b, r24	; 27
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     dea:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)   /** SWITCH CASE ON THE PORT ID **/
			{
				case DIO_PORTA:
				set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
     dec:	08 95       	ret
				
				case DIO_PORTB:
				set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     dee:	28 b3       	in	r18, 0x18	; 24
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_setpinvalue+0xb6>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	6a 95       	dec	r22
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_setpinvalue+0xb2>
     dfe:	82 2b       	or	r24, r18
     e00:	88 bb       	out	0x18, r24	; 24
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e02:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				case DIO_PORTB:
				set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
     e04:	08 95       	ret
				
				case DIO_PORTC:
				set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     e06:	25 b3       	in	r18, 0x15	; 21
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_setpinvalue+0xce>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	6a 95       	dec	r22
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_setpinvalue+0xca>
     e16:	82 2b       	or	r24, r18
     e18:	85 bb       	out	0x15, r24	; 21
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e1a:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				case DIO_PORTC:
				set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
     e1c:	08 95       	ret
				
				case DIO_PORTD:
				set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     e1e:	22 b3       	in	r18, 0x12	; 18
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_setpinvalue+0xe6>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	6a 95       	dec	r22
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <DIO_setpinvalue+0xe2>
     e2e:	82 2b       	or	r24, r18
     e30:	82 bb       	out	0x12, r24	; 18
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e32:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				case DIO_PORTD:
				set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
     e34:	08 95       	ret
			break ;   /** BREAK OF DIO_PIN_HIGH CASE **/
		}
		
		
		default :
		enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	08 95       	ret
				case DIO_PORTD:
				clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				default:
				enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	08 95       	ret
				case DIO_PORTD:
				set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				default:
				enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
     e3e:	81 e0       	ldi	r24, 0x01	; 1
		enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return enu_l_setpinval_state ;    /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
     e40:	08 95       	ret

00000e42 <SET_GLOBALINTERRUPT>:
/** ARGUMENTS  : void (*ptr)(void) (PINTER TO CALL BACK FUNCTION)      **/
/** RETURNS    : VOID                                                  **/
/************************************************************************/
void EXTINT0_setcallback( void (*ptr_func)(void) )
{
	ptr_func_exint0_callback = ptr_func; /** TIMER0 GLOBAL POINTER POINTS TO THE PASSED FUNCTION **/
     e42:	8f b7       	in	r24, 0x3f	; 63
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	8f bf       	out	0x3f, r24	; 63
     e48:	08 95       	ret

00000e4a <EXTINT0_init>:
     e4a:	0e 94 21 07 	call	0xe42	; 0xe42 <SET_GLOBALINTERRUPT>
     e4e:	85 b7       	in	r24, 0x35	; 53
     e50:	81 60       	ori	r24, 0x01	; 1
     e52:	85 bf       	out	0x35, r24	; 53
     e54:	85 b7       	in	r24, 0x35	; 53
     e56:	82 60       	ori	r24, 0x02	; 2
     e58:	85 bf       	out	0x35, r24	; 53
     e5a:	8b b7       	in	r24, 0x3b	; 59
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	8b bf       	out	0x3b, r24	; 59
     e60:	08 95       	ret

00000e62 <EXTINT1_init>:
/** ARGUMENTS  : VOID                                   */
/** RETURNS    : VOID                                   */
/********************************************************/
void EXTINT1_init(void)
{
	SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS **/
     e62:	0e 94 21 07 	call	0xe42	; 0xe42 <SET_GLOBALINTERRUPT>
	
		/** CONFIGURE THE INT1 TRIGGER EVENT **/
	#if EXTERNAL_INT1_TRIGGER  == INT_TRIGGER_RISING_EDGE 
	
	  set_bit(MCUCR , 2);
     e66:	85 b7       	in	r24, 0x35	; 53
     e68:	84 60       	ori	r24, 0x04	; 4
     e6a:	85 bf       	out	0x35, r24	; 53
	  set_bit(MCUCR , 3);
     e6c:	85 b7       	in	r24, 0x35	; 53
     e6e:	88 60       	ori	r24, 0x08	; 8
     e70:	85 bf       	out	0x35, r24	; 53
	  clear_bit(MCUCR , 3);
	  
	#endif

     /* Enable INT1 */
	set_bit(GICR , 7);
     e72:	8b b7       	in	r24, 0x3b	; 59
     e74:	80 68       	ori	r24, 0x80	; 128
     e76:	8b bf       	out	0x3b, r24	; 59
     e78:	08 95       	ret

00000e7a <TMR0_init>:
/** ARGUMENTS  : void (*ptr)(void) (PINTER TO CALL BACK FUNCTION)      **/
/** RETURNS    : VOID                                                  **/
/************************************************************************/
void TMR0_setcallback( void (*ptr_func)(void) )
{
	ptr_func_tmr0_callback = ptr_func; /** TIMER0 GLOBAL POINTER POINTS TO THE PASSED FUNCTION **/
     e7a:	83 b7       	in	r24, 0x33	; 51
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	83 bf       	out	0x33, r24	; 51
     e80:	83 b7       	in	r24, 0x33	; 51
     e82:	8f 7b       	andi	r24, 0xBF	; 191
     e84:	83 bf       	out	0x33, r24	; 51
     e86:	83 b7       	in	r24, 0x33	; 51
     e88:	87 7f       	andi	r24, 0xF7	; 247
     e8a:	83 bf       	out	0x33, r24	; 51
     e8c:	83 b7       	in	r24, 0x33	; 51
     e8e:	8f 7e       	andi	r24, 0xEF	; 239
     e90:	83 bf       	out	0x33, r24	; 51
     e92:	83 b7       	in	r24, 0x33	; 51
     e94:	8f 7d       	andi	r24, 0xDF	; 223
     e96:	83 bf       	out	0x33, r24	; 51
     e98:	8f b7       	in	r24, 0x3f	; 63
     e9a:	80 68       	ori	r24, 0x80	; 128
     e9c:	8f bf       	out	0x3f, r24	; 63
     e9e:	89 b7       	in	r24, 0x39	; 57
     ea0:	81 60       	ori	r24, 0x01	; 1
     ea2:	89 bf       	out	0x39, r24	; 57
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	08 95       	ret

00000ea8 <TMR0_start>:
     ea8:	83 b7       	in	r24, 0x33	; 51
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	83 bf       	out	0x33, r24	; 51
     eae:	83 b7       	in	r24, 0x33	; 51
     eb0:	8d 7f       	andi	r24, 0xFD	; 253
     eb2:	83 bf       	out	0x33, r24	; 51
     eb4:	83 b7       	in	r24, 0x33	; 51
     eb6:	84 60       	ori	r24, 0x04	; 4
     eb8:	83 bf       	out	0x33, r24	; 51
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret

00000ebe <TMR0_stop>:
     ebe:	83 b7       	in	r24, 0x33	; 51
     ec0:	8e 7f       	andi	r24, 0xFE	; 254
     ec2:	83 bf       	out	0x33, r24	; 51
     ec4:	83 b7       	in	r24, 0x33	; 51
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	83 bf       	out	0x33, r24	; 51
     eca:	83 b7       	in	r24, 0x33	; 51
     ecc:	8b 7f       	andi	r24, 0xFB	; 251
     ece:	83 bf       	out	0x33, r24	; 51
     ed0:	08 95       	ret

00000ed2 <TMR0_delay_ms>:
     ed2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__floatunsisf>
     ed6:	2f e6       	ldi	r18, 0x6F	; 111
     ed8:	32 e1       	ldi	r19, 0x12	; 18
     eda:	43 e0       	ldi	r20, 0x03	; 3
     edc:	52 e4       	ldi	r21, 0x42	; 66
     ede:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__divsf3>
     ee2:	0e 94 31 08 	call	0x1062	; 0x1062 <__fixunssfsi>
     ee6:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <u8_gs_delay_ovs>
     eea:	12 be       	out	0x32, r1	; 50
     eec:	0e 94 54 07 	call	0xea8	; 0xea8 <TMR0_start>
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <TMR0_delay_ms+0x26>
     ef2:	88 b7       	in	r24, 0x38	; 56
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	88 bf       	out	0x38, r24	; 56
     ef8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <u8_gs_delay_ovs>
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <u32_gs_overflowcounter>
     f06:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <u32_gs_overflowcounter+0x1>
     f0a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <u32_gs_overflowcounter+0x2>
     f0e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <u32_gs_overflowcounter+0x3>
     f12:	48 17       	cp	r20, r24
     f14:	59 07       	cpc	r21, r25
     f16:	6a 07       	cpc	r22, r26
     f18:	7b 07       	cpc	r23, r27
     f1a:	58 f3       	brcs	.-42     	; 0xef2 <TMR0_delay_ms+0x20>
     f1c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <u32_gs_overflowcounter>
     f20:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <u32_gs_overflowcounter+0x1>
     f24:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <u32_gs_overflowcounter+0x2>
     f28:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <u32_gs_overflowcounter+0x3>
     f2c:	0e 94 5f 07 	call	0xebe	; 0xebe <TMR0_stop>
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	08 95       	ret

00000f34 <__vector_11>:
}

/** TIMER0 INTERRUPT SERVICE ROUTINE **/
ISR(TIMER0_OVF_vect)
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
	u32_gs_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     f46:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <u32_gs_overflowcounter>
     f4a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <u32_gs_overflowcounter+0x1>
     f4e:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <u32_gs_overflowcounter+0x2>
     f52:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <u32_gs_overflowcounter+0x3>
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	a1 1d       	adc	r26, r1
     f5a:	b1 1d       	adc	r27, r1
     f5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <u32_gs_overflowcounter>
     f60:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <u32_gs_overflowcounter+0x1>
     f64:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <u32_gs_overflowcounter+0x2>
     f68:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <u32_gs_overflowcounter+0x3>
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__divsf3>:
     f7e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__divsf3x>
     f82:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_round>
     f86:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_pscB>
     f8a:	58 f0       	brcs	.+22     	; 0xfa2 <__divsf3+0x24>
     f8c:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscA>
     f90:	40 f0       	brcs	.+16     	; 0xfa2 <__divsf3+0x24>
     f92:	29 f4       	brne	.+10     	; 0xf9e <__divsf3+0x20>
     f94:	5f 3f       	cpi	r21, 0xFF	; 255
     f96:	29 f0       	breq	.+10     	; 0xfa2 <__divsf3+0x24>
     f98:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
     f9c:	51 11       	cpse	r21, r1
     f9e:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>
     fa2:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>

00000fa6 <__divsf3x>:
     fa6:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_split3>
     faa:	68 f3       	brcs	.-38     	; 0xf86 <__divsf3+0x8>

00000fac <__divsf3_pse>:
     fac:	99 23       	and	r25, r25
     fae:	b1 f3       	breq	.-20     	; 0xf9c <__divsf3+0x1e>
     fb0:	55 23       	and	r21, r21
     fb2:	91 f3       	breq	.-28     	; 0xf98 <__divsf3+0x1a>
     fb4:	95 1b       	sub	r25, r21
     fb6:	55 0b       	sbc	r21, r21
     fb8:	bb 27       	eor	r27, r27
     fba:	aa 27       	eor	r26, r26
     fbc:	62 17       	cp	r22, r18
     fbe:	73 07       	cpc	r23, r19
     fc0:	84 07       	cpc	r24, r20
     fc2:	38 f0       	brcs	.+14     	; 0xfd2 <__divsf3_pse+0x26>
     fc4:	9f 5f       	subi	r25, 0xFF	; 255
     fc6:	5f 4f       	sbci	r21, 0xFF	; 255
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	44 1f       	adc	r20, r20
     fce:	aa 1f       	adc	r26, r26
     fd0:	a9 f3       	breq	.-22     	; 0xfbc <__divsf3_pse+0x10>
     fd2:	35 d0       	rcall	.+106    	; 0x103e <__divsf3_pse+0x92>
     fd4:	0e 2e       	mov	r0, r30
     fd6:	3a f0       	brmi	.+14     	; 0xfe6 <__divsf3_pse+0x3a>
     fd8:	e0 e8       	ldi	r30, 0x80	; 128
     fda:	32 d0       	rcall	.+100    	; 0x1040 <__divsf3_pse+0x94>
     fdc:	91 50       	subi	r25, 0x01	; 1
     fde:	50 40       	sbci	r21, 0x00	; 0
     fe0:	e6 95       	lsr	r30
     fe2:	00 1c       	adc	r0, r0
     fe4:	ca f7       	brpl	.-14     	; 0xfd8 <__divsf3_pse+0x2c>
     fe6:	2b d0       	rcall	.+86     	; 0x103e <__divsf3_pse+0x92>
     fe8:	fe 2f       	mov	r31, r30
     fea:	29 d0       	rcall	.+82     	; 0x103e <__divsf3_pse+0x92>
     fec:	66 0f       	add	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	bb 1f       	adc	r27, r27
     ff4:	26 17       	cp	r18, r22
     ff6:	37 07       	cpc	r19, r23
     ff8:	48 07       	cpc	r20, r24
     ffa:	ab 07       	cpc	r26, r27
     ffc:	b0 e8       	ldi	r27, 0x80	; 128
     ffe:	09 f0       	breq	.+2      	; 0x1002 <__divsf3_pse+0x56>
    1000:	bb 0b       	sbc	r27, r27
    1002:	80 2d       	mov	r24, r0
    1004:	bf 01       	movw	r22, r30
    1006:	ff 27       	eor	r31, r31
    1008:	93 58       	subi	r25, 0x83	; 131
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	3a f0       	brmi	.+14     	; 0x101c <__divsf3_pse+0x70>
    100e:	9e 3f       	cpi	r25, 0xFE	; 254
    1010:	51 05       	cpc	r21, r1
    1012:	78 f0       	brcs	.+30     	; 0x1032 <__divsf3_pse+0x86>
    1014:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
    1018:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>
    101c:	5f 3f       	cpi	r21, 0xFF	; 255
    101e:	e4 f3       	brlt	.-8      	; 0x1018 <__divsf3_pse+0x6c>
    1020:	98 3e       	cpi	r25, 0xE8	; 232
    1022:	d4 f3       	brlt	.-12     	; 0x1018 <__divsf3_pse+0x6c>
    1024:	86 95       	lsr	r24
    1026:	77 95       	ror	r23
    1028:	67 95       	ror	r22
    102a:	b7 95       	ror	r27
    102c:	f7 95       	ror	r31
    102e:	9f 5f       	subi	r25, 0xFF	; 255
    1030:	c9 f7       	brne	.-14     	; 0x1024 <__divsf3_pse+0x78>
    1032:	88 0f       	add	r24, r24
    1034:	91 1d       	adc	r25, r1
    1036:	96 95       	lsr	r25
    1038:	87 95       	ror	r24
    103a:	97 f9       	bld	r25, 7
    103c:	08 95       	ret
    103e:	e1 e0       	ldi	r30, 0x01	; 1
    1040:	66 0f       	add	r22, r22
    1042:	77 1f       	adc	r23, r23
    1044:	88 1f       	adc	r24, r24
    1046:	bb 1f       	adc	r27, r27
    1048:	62 17       	cp	r22, r18
    104a:	73 07       	cpc	r23, r19
    104c:	84 07       	cpc	r24, r20
    104e:	ba 07       	cpc	r27, r26
    1050:	20 f0       	brcs	.+8      	; 0x105a <__divsf3_pse+0xae>
    1052:	62 1b       	sub	r22, r18
    1054:	73 0b       	sbc	r23, r19
    1056:	84 0b       	sbc	r24, r20
    1058:	ba 0b       	sbc	r27, r26
    105a:	ee 1f       	adc	r30, r30
    105c:	88 f7       	brcc	.-30     	; 0x1040 <__divsf3_pse+0x94>
    105e:	e0 95       	com	r30
    1060:	08 95       	ret

00001062 <__fixunssfsi>:
    1062:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_splitA>
    1066:	88 f0       	brcs	.+34     	; 0x108a <__fixunssfsi+0x28>
    1068:	9f 57       	subi	r25, 0x7F	; 127
    106a:	98 f0       	brcs	.+38     	; 0x1092 <__fixunssfsi+0x30>
    106c:	b9 2f       	mov	r27, r25
    106e:	99 27       	eor	r25, r25
    1070:	b7 51       	subi	r27, 0x17	; 23
    1072:	b0 f0       	brcs	.+44     	; 0x10a0 <__fixunssfsi+0x3e>
    1074:	e1 f0       	breq	.+56     	; 0x10ae <__fixunssfsi+0x4c>
    1076:	66 0f       	add	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	1a f0       	brmi	.+6      	; 0x1086 <__fixunssfsi+0x24>
    1080:	ba 95       	dec	r27
    1082:	c9 f7       	brne	.-14     	; 0x1076 <__fixunssfsi+0x14>
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <__fixunssfsi+0x4c>
    1086:	b1 30       	cpi	r27, 0x01	; 1
    1088:	91 f0       	breq	.+36     	; 0x10ae <__fixunssfsi+0x4c>
    108a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__fp_zero>
    108e:	b1 e0       	ldi	r27, 0x01	; 1
    1090:	08 95       	ret
    1092:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_zero>
    1096:	67 2f       	mov	r22, r23
    1098:	78 2f       	mov	r23, r24
    109a:	88 27       	eor	r24, r24
    109c:	b8 5f       	subi	r27, 0xF8	; 248
    109e:	39 f0       	breq	.+14     	; 0x10ae <__fixunssfsi+0x4c>
    10a0:	b9 3f       	cpi	r27, 0xF9	; 249
    10a2:	cc f3       	brlt	.-14     	; 0x1096 <__fixunssfsi+0x34>
    10a4:	86 95       	lsr	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b3 95       	inc	r27
    10ac:	d9 f7       	brne	.-10     	; 0x10a4 <__fixunssfsi+0x42>
    10ae:	3e f4       	brtc	.+14     	; 0x10be <__fixunssfsi+0x5c>
    10b0:	90 95       	com	r25
    10b2:	80 95       	com	r24
    10b4:	70 95       	com	r23
    10b6:	61 95       	neg	r22
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	8f 4f       	sbci	r24, 0xFF	; 255
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	08 95       	ret

000010c0 <__floatunsisf>:
    10c0:	e8 94       	clt
    10c2:	09 c0       	rjmp	.+18     	; 0x10d6 <__floatsisf+0x12>

000010c4 <__floatsisf>:
    10c4:	97 fb       	bst	r25, 7
    10c6:	3e f4       	brtc	.+14     	; 0x10d6 <__floatsisf+0x12>
    10c8:	90 95       	com	r25
    10ca:	80 95       	com	r24
    10cc:	70 95       	com	r23
    10ce:	61 95       	neg	r22
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	8f 4f       	sbci	r24, 0xFF	; 255
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	99 23       	and	r25, r25
    10d8:	a9 f0       	breq	.+42     	; 0x1104 <__floatsisf+0x40>
    10da:	f9 2f       	mov	r31, r25
    10dc:	96 e9       	ldi	r25, 0x96	; 150
    10de:	bb 27       	eor	r27, r27
    10e0:	93 95       	inc	r25
    10e2:	f6 95       	lsr	r31
    10e4:	87 95       	ror	r24
    10e6:	77 95       	ror	r23
    10e8:	67 95       	ror	r22
    10ea:	b7 95       	ror	r27
    10ec:	f1 11       	cpse	r31, r1
    10ee:	f8 cf       	rjmp	.-16     	; 0x10e0 <__floatsisf+0x1c>
    10f0:	fa f4       	brpl	.+62     	; 0x1130 <__floatsisf+0x6c>
    10f2:	bb 0f       	add	r27, r27
    10f4:	11 f4       	brne	.+4      	; 0x10fa <__floatsisf+0x36>
    10f6:	60 ff       	sbrs	r22, 0
    10f8:	1b c0       	rjmp	.+54     	; 0x1130 <__floatsisf+0x6c>
    10fa:	6f 5f       	subi	r22, 0xFF	; 255
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1100:	9f 4f       	sbci	r25, 0xFF	; 255
    1102:	16 c0       	rjmp	.+44     	; 0x1130 <__floatsisf+0x6c>
    1104:	88 23       	and	r24, r24
    1106:	11 f0       	breq	.+4      	; 0x110c <__floatsisf+0x48>
    1108:	96 e9       	ldi	r25, 0x96	; 150
    110a:	11 c0       	rjmp	.+34     	; 0x112e <__floatsisf+0x6a>
    110c:	77 23       	and	r23, r23
    110e:	21 f0       	breq	.+8      	; 0x1118 <__floatsisf+0x54>
    1110:	9e e8       	ldi	r25, 0x8E	; 142
    1112:	87 2f       	mov	r24, r23
    1114:	76 2f       	mov	r23, r22
    1116:	05 c0       	rjmp	.+10     	; 0x1122 <__floatsisf+0x5e>
    1118:	66 23       	and	r22, r22
    111a:	71 f0       	breq	.+28     	; 0x1138 <__floatsisf+0x74>
    111c:	96 e8       	ldi	r25, 0x86	; 134
    111e:	86 2f       	mov	r24, r22
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	2a f0       	brmi	.+10     	; 0x1130 <__floatsisf+0x6c>
    1126:	9a 95       	dec	r25
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	da f7       	brpl	.-10     	; 0x1126 <__floatsisf+0x62>
    1130:	88 0f       	add	r24, r24
    1132:	96 95       	lsr	r25
    1134:	87 95       	ror	r24
    1136:	97 f9       	bld	r25, 7
    1138:	08 95       	ret

0000113a <__fp_inf>:
    113a:	97 f9       	bld	r25, 7
    113c:	9f 67       	ori	r25, 0x7F	; 127
    113e:	80 e8       	ldi	r24, 0x80	; 128
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	08 95       	ret

00001146 <__fp_nan>:
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	80 ec       	ldi	r24, 0xC0	; 192
    114a:	08 95       	ret

0000114c <__fp_pscA>:
    114c:	00 24       	eor	r0, r0
    114e:	0a 94       	dec	r0
    1150:	16 16       	cp	r1, r22
    1152:	17 06       	cpc	r1, r23
    1154:	18 06       	cpc	r1, r24
    1156:	09 06       	cpc	r0, r25
    1158:	08 95       	ret

0000115a <__fp_pscB>:
    115a:	00 24       	eor	r0, r0
    115c:	0a 94       	dec	r0
    115e:	12 16       	cp	r1, r18
    1160:	13 06       	cpc	r1, r19
    1162:	14 06       	cpc	r1, r20
    1164:	05 06       	cpc	r0, r21
    1166:	08 95       	ret

00001168 <__fp_round>:
    1168:	09 2e       	mov	r0, r25
    116a:	03 94       	inc	r0
    116c:	00 0c       	add	r0, r0
    116e:	11 f4       	brne	.+4      	; 0x1174 <__fp_round+0xc>
    1170:	88 23       	and	r24, r24
    1172:	52 f0       	brmi	.+20     	; 0x1188 <__fp_round+0x20>
    1174:	bb 0f       	add	r27, r27
    1176:	40 f4       	brcc	.+16     	; 0x1188 <__fp_round+0x20>
    1178:	bf 2b       	or	r27, r31
    117a:	11 f4       	brne	.+4      	; 0x1180 <__fp_round+0x18>
    117c:	60 ff       	sbrs	r22, 0
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <__fp_round+0x20>
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	08 95       	ret

0000118a <__fp_split3>:
    118a:	57 fd       	sbrc	r21, 7
    118c:	90 58       	subi	r25, 0x80	; 128
    118e:	44 0f       	add	r20, r20
    1190:	55 1f       	adc	r21, r21
    1192:	59 f0       	breq	.+22     	; 0x11aa <__fp_splitA+0x10>
    1194:	5f 3f       	cpi	r21, 0xFF	; 255
    1196:	71 f0       	breq	.+28     	; 0x11b4 <__fp_splitA+0x1a>
    1198:	47 95       	ror	r20

0000119a <__fp_splitA>:
    119a:	88 0f       	add	r24, r24
    119c:	97 fb       	bst	r25, 7
    119e:	99 1f       	adc	r25, r25
    11a0:	61 f0       	breq	.+24     	; 0x11ba <__fp_splitA+0x20>
    11a2:	9f 3f       	cpi	r25, 0xFF	; 255
    11a4:	79 f0       	breq	.+30     	; 0x11c4 <__fp_splitA+0x2a>
    11a6:	87 95       	ror	r24
    11a8:	08 95       	ret
    11aa:	12 16       	cp	r1, r18
    11ac:	13 06       	cpc	r1, r19
    11ae:	14 06       	cpc	r1, r20
    11b0:	55 1f       	adc	r21, r21
    11b2:	f2 cf       	rjmp	.-28     	; 0x1198 <__fp_split3+0xe>
    11b4:	46 95       	lsr	r20
    11b6:	f1 df       	rcall	.-30     	; 0x119a <__fp_splitA>
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <__fp_splitA+0x30>
    11ba:	16 16       	cp	r1, r22
    11bc:	17 06       	cpc	r1, r23
    11be:	18 06       	cpc	r1, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	f1 cf       	rjmp	.-30     	; 0x11a6 <__fp_splitA+0xc>
    11c4:	86 95       	lsr	r24
    11c6:	71 05       	cpc	r23, r1
    11c8:	61 05       	cpc	r22, r1
    11ca:	08 94       	sec
    11cc:	08 95       	ret

000011ce <__fp_zero>:
    11ce:	e8 94       	clt

000011d0 <__fp_szero>:
    11d0:	bb 27       	eor	r27, r27
    11d2:	66 27       	eor	r22, r22
    11d4:	77 27       	eor	r23, r23
    11d6:	cb 01       	movw	r24, r22
    11d8:	97 f9       	bld	r25, 7
    11da:	08 95       	ret

000011dc <_exit>:
    11dc:	f8 94       	cli

000011de <__stop_program>:
    11de:	ff cf       	rjmp	.-2      	; 0x11de <__stop_program>
