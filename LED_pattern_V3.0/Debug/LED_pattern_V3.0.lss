
LED_pattern_V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000126a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000012de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  000012de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003104  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cf  00000000  00000000  000045f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f6  00000000  00000000  00004fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  000063b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a1  00000000  00000000  00006698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a6  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000078df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_1>
       8:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__vector_2>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 36       	cpi	r26, 0x67	; 103
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 61 06 	call	0xcc2	; 0xcc2 <main>
      74:	0c 94 33 09 	jmp	0x1266	; 0x1266 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LEDs_off>:
	
	enu_app_error_status_t enu_l_ledsoff_status = APP_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/
	
	/** TURN ALL LEDs OFF **/
	
	enu_l_ledstatus = LED_off(LED1_PORT , LED1_PIN);
      7c:	62 e0       	ldi	r22, 0x02	; 2
      7e:	82 e0       	ldi	r24, 0x02	; 2
      80:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
	
	if ( enu_l_ledstatus == LED_SUCCEED )
      84:	81 11       	cpse	r24, r1
      86:	13 c0       	rjmp	.+38     	; 0xae <LEDs_off+0x32>
	{
		enu_l_ledstatus = LED_off(LED2_PORT , LED2_PIN);
      88:	63 e0       	ldi	r22, 0x03	; 3
      8a:	82 e0       	ldi	r24, 0x02	; 2
      8c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
		
		if ( enu_l_ledstatus == LED_SUCCEED )
      90:	81 11       	cpse	r24, r1
      92:	0f c0       	rjmp	.+30     	; 0xb2 <LEDs_off+0x36>
		{
			enu_l_ledstatus = LED_off(LED3_PORT , LED3_PIN);
      94:	64 e0       	ldi	r22, 0x04	; 4
      96:	82 e0       	ldi	r24, 0x02	; 2
      98:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
			
			if ( enu_l_ledstatus == LED_SUCCEED)
      9c:	81 11       	cpse	r24, r1
      9e:	0b c0       	rjmp	.+22     	; 0xb6 <LEDs_off+0x3a>
			{
				enu_l_ledstatus = LED_off(LED4_PORT , LED4_PIN);
      a0:	65 e0       	ldi	r22, 0x05	; 5
      a2:	82 e0       	ldi	r24, 0x02	; 2
      a4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				if ( enu_l_ledstatus == LED_SUCCEED)
      a8:	81 11       	cpse	r24, r1
      aa:	07 c0       	rjmp	.+14     	; 0xba <LEDs_off+0x3e>
      ac:	08 95       	ret
			enu_l_ledsoff_status = APP_FAILURE ;  /** RETURN FAILURE **/
		}
	}
	else /** LED1 FAILED **/
	{
		enu_l_ledsoff_status = APP_FAILURE ;  /** RETURN FAILURE **/
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	08 95       	ret
				enu_l_ledsoff_status = APP_FAILURE ;  /** RETURN FAILURE **/
			}
		}
		else  /** LED2 FAILED **/
		{
			enu_l_ledsoff_status = APP_FAILURE ;  /** RETURN FAILURE **/
      b2:	81 e0       	ldi	r24, 0x01	; 1
      b4:	08 95       	ret
					enu_l_ledsoff_status = APP_FAILURE ;  /** RETURN FAILURE **/
				}
			}
			else  /** LED3 FAILED **/
			{
				enu_l_ledsoff_status = APP_FAILURE ;  /** RETURN FAILURE **/
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	08 95       	ret
				{
					/** DO NOTHING **/
				}
				else   /** LED4 FAILED **/
				{
					enu_l_ledsoff_status = APP_FAILURE ;  /** RETURN FAILURE **/
      ba:	81 e0       	ldi	r24, 0x01	; 1
	{
		enu_l_ledsoff_status = APP_FAILURE ;  /** RETURN FAILURE **/
	}
	
	return enu_l_ledsoff_status ;  /** RETURN THE FUNCTION FINAL STATUS **/
}
      bc:	08 95       	ret

000000be <LEDs_init>:
	
	enu_app_error_status_t enu_l_ledsinit_error_status = APP_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/
	
	/** INITIALIZE THE 4 LEDS **/
	
	enu_l_led_error_status = LED_init(LED1_PORT , LED1_PIN); 
      be:	62 e0       	ldi	r22, 0x02	; 2
      c0:	82 e0       	ldi	r24, 0x02	; 2
      c2:	0e 94 51 06 	call	0xca2	; 0xca2 <LED_init>
	
	if ( enu_l_led_error_status == LED_SUCCEED ) /** LED1 INITIALIZATION SUCCEEDED **/
      c6:	81 11       	cpse	r24, r1
      c8:	13 c0       	rjmp	.+38     	; 0xf0 <LEDs_init+0x32>
	{
		enu_l_led_error_status = LED_init(LED2_PORT , LED2_PIN);
      ca:	63 e0       	ldi	r22, 0x03	; 3
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	0e 94 51 06 	call	0xca2	; 0xca2 <LED_init>
		
		if ( enu_l_led_error_status == LED_SUCCEED ) /** LED2 INITIALIZATION SUCCEEDED **/
      d2:	81 11       	cpse	r24, r1
      d4:	0f c0       	rjmp	.+30     	; 0xf4 <LEDs_init+0x36>
		{
			enu_l_led_error_status = LED_init(LED3_PORT , LED3_PIN);
      d6:	64 e0       	ldi	r22, 0x04	; 4
      d8:	82 e0       	ldi	r24, 0x02	; 2
      da:	0e 94 51 06 	call	0xca2	; 0xca2 <LED_init>
			
			if( enu_l_led_error_status == LED_SUCCEED ) /** LED3 INITIALIZATION SUCCEEDED **/
      de:	81 11       	cpse	r24, r1
      e0:	0b c0       	rjmp	.+22     	; 0xf8 <LEDs_init+0x3a>
			{
				enu_l_led_error_status = LED_init(LED4_PORT , LED4_PIN); 
      e2:	65 e0       	ldi	r22, 0x05	; 5
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	0e 94 51 06 	call	0xca2	; 0xca2 <LED_init>
				
				if ( enu_l_led_error_status == LED_SUCCEED ) /** LED4 INITIALIZATION SUCCEEDED **/
      ea:	81 11       	cpse	r24, r1
      ec:	07 c0       	rjmp	.+14     	; 0xfc <LEDs_init+0x3e>
      ee:	08 95       	ret
			enu_l_ledsinit_error_status = APP_FAILURE ;  /** RETURN FAILURE **/
		}
	}
	else /** LED1 INITIALIZATION FAILUED **/
	{
		enu_l_ledsinit_error_status = APP_FAILURE ;  /** RETURN FAILURE **/
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	08 95       	ret
				enu_l_ledsinit_error_status = APP_FAILURE ;  /** RETURN FAILURE **/
			}
		}
		else /** LED2 INITIALIZATION FAILUED **/
		{
			enu_l_ledsinit_error_status = APP_FAILURE ;  /** RETURN FAILURE **/
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	08 95       	ret
					enu_l_ledsinit_error_status = APP_FAILURE ;  /** RETURN FAILURE **/
				}
			}
			else /** LED3 INITIALIZATION FAILUED **/
			{
				enu_l_ledsinit_error_status = APP_FAILURE ;  /** RETURN FAILURE **/
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	08 95       	ret
				{
					/** DO NOTHING **/
				}
				else /** LED4 INITIALIZATION FAILUED **/
				{
					enu_l_ledsinit_error_status = APP_FAILURE ;  /** RETURN FAILURE **/
      fc:	81 e0       	ldi	r24, 0x01	; 1
	{
		enu_l_ledsinit_error_status = APP_FAILURE ;  /** RETURN FAILURE **/
	}
	
	return enu_l_ledsinit_error_status ;  /** RETURN THE FUNCATION FINAL STATUS **/
}
      fe:	08 95       	ret

00000100 <APP_init>:
/** FUNCTION TO INITIALIZE MODULES                   **/
/** ARGUMENTS  : VOID                                **/
/** RETURNS    : enu_app_error_status_t              **/
/******************************************************/
enu_app_error_status_t APP_init(void)
{
     100:	cf 93       	push	r28
	
	enu_timer0_error_status_t enu_timer0init_status = TIMER0_SUCCEED ;  /** LOCAL VARIABLE TO HOLD TIMER FUNCTIONS ERROR STATUS **/
	
	enu_extint_error_status_t enu_extintinit_error_status = EXT_INT_SUCCEED ; /** LOCAL VARIABLE TO HOLD EXTINT FUNCTIONS ERROR STATUS **/
	
    enu_l_appinit_error_status = LEDs_init(); /** INITIALIZE ALL LEDS **/
     102:	0e 94 5f 00 	call	0xbe	; 0xbe <LEDs_init>
	
	if ( enu_l_appinit_error_status == APP_SUCCEED )
     106:	81 11       	cpse	r24, r1
     108:	12 c0       	rjmp	.+36     	; 0x12e <APP_init+0x2e>
	{
		enu_l_appinit_error_status = LEDs_off();  /** TURN OFF ALL LEDs **/
     10a:	0e 94 3e 00 	call	0x7c	; 0x7c <LEDs_off>
     10e:	c8 2f       	mov	r28, r24
		
		if( enu_l_appinit_error_status == APP_SUCCEED )
     110:	81 11       	cpse	r24, r1
     112:	0f c0       	rjmp	.+30     	; 0x132 <APP_init+0x32>
		{
			enu_timer0init_status = TMR0_init(); /** INITIALIZE TMR0 **/
     114:	0e 94 82 07 	call	0xf04	; 0xf04 <TMR0_init>
			
			if ( enu_timer0init_status == TIMER0_SUCCEED )
     118:	81 11       	cpse	r24, r1
     11a:	0d c0       	rjmp	.+26     	; 0x136 <APP_init+0x36>
			{
				enu_extintinit_error_status = EXTINT0_init(); /** INITIALIZE INT0 **/
     11c:	0e 94 68 07 	call	0xed0	; 0xed0 <EXTINT0_init>
				
				if ( enu_extintinit_error_status == EXT_INT_SUCCEED )
     120:	81 11       	cpse	r24, r1
     122:	0b c0       	rjmp	.+22     	; 0x13a <APP_init+0x3a>
				{
					enu_extintinit_error_status = EXTINT1_init(); /** INITIALIZE INT  **/
     124:	0e 94 75 07 	call	0xeea	; 0xeea <EXTINT1_init>
					
					if ( enu_extintinit_error_status == EXT_INT_SUCCEED )
     128:	81 11       	cpse	r24, r1
     12a:	09 c0       	rjmp	.+18     	; 0x13e <APP_init+0x3e>
     12c:	09 c0       	rjmp	.+18     	; 0x140 <APP_init+0x40>
			enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
		}
	}
	else /** LEDs INITIALIZATION FAILED **/
	{
		enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
     12e:	c1 e0       	ldi	r28, 0x01	; 1
     130:	07 c0       	rjmp	.+14     	; 0x140 <APP_init+0x40>
				enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
			}
		}
		else  /** TURN OFF LEDs FAILED **/
		{
			enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
     132:	c1 e0       	ldi	r28, 0x01	; 1
     134:	05 c0       	rjmp	.+10     	; 0x140 <APP_init+0x40>
					enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
				}
			}
			else /** TIMER0 INITIALIZATION FAILED **/
			{
				enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
     136:	c1 e0       	ldi	r28, 0x01	; 1
     138:	03 c0       	rjmp	.+6      	; 0x140 <APP_init+0x40>
						enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
					}
				}
				else /** EXTINT0 INITIALIZATION FAILED **/
				{
					enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
     13a:	c1 e0       	ldi	r28, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <APP_init+0x40>
					{
						/** DO NOTHING **/
					}
					else  /** EXTINT1 INITIALIZATION FAILED **/
					{
						enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
     13e:	c1 e0       	ldi	r28, 0x01	; 1
	{
		enu_l_appinit_error_status = APP_FAILURE ; /** RETURN FAILURE **/
	}
	
	return enu_l_appinit_error_status ; /** RETURN THE FUNCTION FINAL STATUS **/
}
     140:	8c 2f       	mov	r24, r28
     142:	cf 91       	pop	r28
     144:	08 95       	ret

00000146 <APP_start>:
/** RETURNS    : VOID                                **/
/******************************************************/
void APP_start(void)
{
	
	if ( u8_gs_LED_mode >= MAX_LED_MODES )  /** RETURN TO LED MODE 0 AGAIN **/
     146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     14a:	88 30       	cpi	r24, 0x08	; 8
     14c:	10 f0       	brcs	.+4      	; 0x152 <APP_start+0xc>
	{
		u8_gs_LED_mode =  INITIAL_VALUE ;
     14e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	if ( u8_gs_blinking_mode >= MAX_BLINK_MODE ) /** RETURN TO BLINKING MODE 0 AGAIN **/
     152:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <u8_gs_blinking_mode>
     156:	85 30       	cpi	r24, 0x05	; 5
     158:	10 f0       	brcs	.+4      	; 0x15e <APP_start+0x18>
	{
		u8_gs_blinking_mode = INITIAL_VALUE ;
     15a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <u8_gs_blinking_mode>
	}
	
	
	switch ( u8_gs_blinking_mode )  /** SWICH CASE ON BLINKING MODE **/
     15e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <u8_gs_blinking_mode>
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	09 f4       	brne	.+2      	; 0x168 <APP_start+0x22>
     166:	3a c2       	rjmp	.+1140   	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
     168:	30 f4       	brcc	.+12     	; 0x176 <APP_start+0x30>
     16a:	88 23       	and	r24, r24
     16c:	59 f0       	breq	.+22     	; 0x184 <APP_start+0x3e>
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	09 f4       	brne	.+2      	; 0x174 <APP_start+0x2e>
     172:	1e c1       	rjmp	.+572    	; 0x3b0 <APP_start+0x26a>
     174:	08 95       	ret
     176:	83 30       	cpi	r24, 0x03	; 3
     178:	09 f4       	brne	.+2      	; 0x17c <APP_start+0x36>
     17a:	46 c3       	rjmp	.+1676   	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     17c:	84 30       	cpi	r24, 0x04	; 4
     17e:	09 f4       	brne	.+2      	; 0x182 <APP_start+0x3c>
     180:	59 c4       	rjmp	.+2226   	; 0xa34 <__stack+0x1d5>
     182:	08 95       	ret
	{
		case BLINK_MODE_1 :
		{
			if ( u8_gs_LED_mode == LED_MODE_1 ) /** ALL LEDs ARE OFF **/
     184:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     188:	81 11       	cpse	r24, r1
     18a:	11 c0       	rjmp	.+34     	; 0x1ae <APP_start+0x68>
			{
				LED_off(LED1_PORT , LED1_PIN);
     18c:	62 e0       	ldi	r22, 0x02	; 2
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     194:	63 e0       	ldi	r22, 0x03	; 3
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     19c:	64 e0       	ldi	r22, 0x04	; 4
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     1a4:	65 e0       	ldi	r22, 0x05	; 5
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
     1ac:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_2 ) /** LED 1 IS BLINKING **/
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	a9 f4       	brne	.+42     	; 0x1dc <APP_start+0x96>
			{
				LED_on(LED1_PORT , LED1_PIN);
     1b2:	62 e0       	ldi	r22, 0x02	; 2
     1b4:	82 e0       	ldi	r24, 0x02	; 2
     1b6:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(100);
     1ba:	64 e6       	ldi	r22, 0x64	; 100
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(900);
     1ce:	64 e8       	ldi	r22, 0x84	; 132
     1d0:	73 e0       	ldi	r23, 0x03	; 3
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     1da:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_3 ) /** LED 1 , 2 ARE BLINKING **/
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	e1 f4       	brne	.+56     	; 0x218 <APP_start+0xd2>
			{
				LED_on(LED1_PORT , LED1_PIN);
     1e0:	62 e0       	ldi	r22, 0x02	; 2
     1e2:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     1e6:	63 e0       	ldi	r22, 0x03	; 3
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(100);
     1ee:	64 e6       	ldi	r22, 0x64	; 100
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     1fa:	62 e0       	ldi	r22, 0x02	; 2
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     202:	63 e0       	ldi	r22, 0x03	; 3
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(900);
     20a:	64 e8       	ldi	r22, 0x84	; 132
     20c:	73 e0       	ldi	r23, 0x03	; 3
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     216:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_4 ) /** LED 1 , 2 , 3  ARE BLINKING **/
     218:	83 30       	cpi	r24, 0x03	; 3
     21a:	29 f5       	brne	.+74     	; 0x266 <APP_start+0x120>
			{
				LED_on(LED1_PORT , LED1_PIN);
     21c:	62 e0       	ldi	r22, 0x02	; 2
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     224:	63 e0       	ldi	r22, 0x03	; 3
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     22c:	64 e0       	ldi	r22, 0x04	; 4
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(100);
     234:	64 e6       	ldi	r22, 0x64	; 100
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     240:	62 e0       	ldi	r22, 0x02	; 2
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     248:	63 e0       	ldi	r22, 0x03	; 3
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     250:	64 e0       	ldi	r22, 0x04	; 4
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(900);
     258:	64 e8       	ldi	r22, 0x84	; 132
     25a:	73 e0       	ldi	r23, 0x03	; 3
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     264:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_5 ) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     266:	84 30       	cpi	r24, 0x04	; 4
     268:	69 f5       	brne	.+90     	; 0x2c4 <APP_start+0x17e>
			{
				LED_on(LED1_PORT , LED1_PIN);
     26a:	62 e0       	ldi	r22, 0x02	; 2
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     272:	63 e0       	ldi	r22, 0x03	; 3
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     27a:	64 e0       	ldi	r22, 0x04	; 4
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     282:	65 e0       	ldi	r22, 0x05	; 5
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(100);
     28a:	64 e6       	ldi	r22, 0x64	; 100
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     296:	62 e0       	ldi	r22, 0x02	; 2
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     29e:	63 e0       	ldi	r22, 0x03	; 3
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     2a6:	64 e0       	ldi	r22, 0x04	; 4
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     2ae:	65 e0       	ldi	r22, 0x05	; 5
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(900);
     2b6:	64 e8       	ldi	r22, 0x84	; 132
     2b8:	73 e0       	ldi	r23, 0x03	; 3
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     2c2:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_6 ) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     2c4:	85 30       	cpi	r24, 0x05	; 5
     2c6:	49 f5       	brne	.+82     	; 0x31a <APP_start+0x1d4>
			{
				LED_off(LED1_PORT , LED1_PIN);
     2c8:	62 e0       	ldi	r22, 0x02	; 2
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     2d0:	63 e0       	ldi	r22, 0x03	; 3
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     2d8:	64 e0       	ldi	r22, 0x04	; 4
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     2e0:	65 e0       	ldi	r22, 0x05	; 5
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(100);
     2e8:	64 e6       	ldi	r22, 0x64	; 100
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     2f4:	63 e0       	ldi	r22, 0x03	; 3
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     2fc:	64 e0       	ldi	r22, 0x04	; 4
     2fe:	82 e0       	ldi	r24, 0x02	; 2
     300:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     304:	65 e0       	ldi	r22, 0x05	; 5
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(900);
     30c:	64 e8       	ldi	r22, 0x84	; 132
     30e:	73 e0       	ldi	r23, 0x03	; 3
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     318:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_7 ) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     31a:	86 30       	cpi	r24, 0x06	; 6
     31c:	29 f5       	brne	.+74     	; 0x368 <APP_start+0x222>
			{
				LED_off(LED1_PORT , LED1_PIN);
     31e:	62 e0       	ldi	r22, 0x02	; 2
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     326:	63 e0       	ldi	r22, 0x03	; 3
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     32e:	64 e0       	ldi	r22, 0x04	; 4
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     336:	65 e0       	ldi	r22, 0x05	; 5
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(100);
     33e:	64 e6       	ldi	r22, 0x64	; 100
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     34a:	64 e0       	ldi	r22, 0x04	; 4
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     352:	65 e0       	ldi	r22, 0x05	; 5
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(900);
     35a:	64 e8       	ldi	r22, 0x84	; 132
     35c:	73 e0       	ldi	r23, 0x03	; 3
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     366:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_8 )  /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     368:	87 30       	cpi	r24, 0x07	; 7
     36a:	09 f0       	breq	.+2      	; 0x36e <APP_start+0x228>
     36c:	77 c4       	rjmp	.+2286   	; 0xc5c <__stack+0x3fd>
			{
				LED_off(LED1_PORT , LED1_PIN);
     36e:	62 e0       	ldi	r22, 0x02	; 2
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     376:	63 e0       	ldi	r22, 0x03	; 3
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     37e:	64 e0       	ldi	r22, 0x04	; 4
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     386:	65 e0       	ldi	r22, 0x05	; 5
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(100);
     38e:	64 e6       	ldi	r22, 0x64	; 100
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     39a:	65 e0       	ldi	r22, 0x05	; 5
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(900);
     3a2:	64 e8       	ldi	r22, 0x84	; 132
     3a4:	73 e0       	ldi	r23, 0x03	; 3
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     3ae:	08 95       	ret
		}
		break ;
		
		case BLINK_MODE_2 :
		{
			if ( u8_gs_LED_mode == LED_MODE_1 ) /** ALL LEDs ARE OFF **/
     3b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3b4:	81 11       	cpse	r24, r1
     3b6:	11 c0       	rjmp	.+34     	; 0x3da <APP_start+0x294>
			{
				LED_off(LED1_PORT , LED1_PIN);
     3b8:	62 e0       	ldi	r22, 0x02	; 2
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     3c0:	63 e0       	ldi	r22, 0x03	; 3
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     3c8:	64 e0       	ldi	r22, 0x04	; 4
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     3d0:	65 e0       	ldi	r22, 0x05	; 5
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
     3d8:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_2 ) /** LED 1 IS BLINKING **/
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	a9 f4       	brne	.+42     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			{
				LED_on(LED1_PORT , LED1_PIN);
     3de:	62 e0       	ldi	r22, 0x02	; 2
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(200);
     3e6:	68 ec       	ldi	r22, 0xC8	; 200
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     3f2:	62 e0       	ldi	r22, 0x02	; 2
     3f4:	82 e0       	ldi	r24, 0x02	; 2
     3f6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(800);
     3fa:	60 e2       	ldi	r22, 0x20	; 32
     3fc:	73 e0       	ldi	r23, 0x03	; 3
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     406:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_3 ) /** LED 1 , 2 ARE BLINKING **/
     408:	82 30       	cpi	r24, 0x02	; 2
     40a:	e1 f4       	brne	.+56     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			{
				LED_on(LED1_PORT , LED1_PIN);
     40c:	62 e0       	ldi	r22, 0x02	; 2
     40e:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     412:	63 e0       	ldi	r22, 0x03	; 3
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(200);
     41a:	68 ec       	ldi	r22, 0xC8	; 200
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     426:	62 e0       	ldi	r22, 0x02	; 2
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     42e:	63 e0       	ldi	r22, 0x03	; 3
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(800);
     436:	60 e2       	ldi	r22, 0x20	; 32
     438:	73 e0       	ldi	r23, 0x03	; 3
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     442:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_4 ) /** LED 1 , 2 , 3  ARE BLINKING **/
     444:	83 30       	cpi	r24, 0x03	; 3
     446:	29 f5       	brne	.+74     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
			{
				LED_on(LED1_PORT , LED1_PIN);
     448:	62 e0       	ldi	r22, 0x02	; 2
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     450:	63 e0       	ldi	r22, 0x03	; 3
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     458:	64 e0       	ldi	r22, 0x04	; 4
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(200);
     460:	68 ec       	ldi	r22, 0xC8	; 200
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     46c:	62 e0       	ldi	r22, 0x02	; 2
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     474:	63 e0       	ldi	r22, 0x03	; 3
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     47c:	64 e0       	ldi	r22, 0x04	; 4
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(800);
     484:	60 e2       	ldi	r22, 0x20	; 32
     486:	73 e0       	ldi	r23, 0x03	; 3
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     490:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_5 ) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     492:	84 30       	cpi	r24, 0x04	; 4
     494:	69 f5       	brne	.+90     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
			{
				LED_on(LED1_PORT , LED1_PIN);
     496:	62 e0       	ldi	r22, 0x02	; 2
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     49e:	63 e0       	ldi	r22, 0x03	; 3
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     4a6:	64 e0       	ldi	r22, 0x04	; 4
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     4ae:	65 e0       	ldi	r22, 0x05	; 5
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(200);
     4b6:	68 ec       	ldi	r22, 0xC8	; 200
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     4c2:	62 e0       	ldi	r22, 0x02	; 2
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     4ca:	63 e0       	ldi	r22, 0x03	; 3
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     4d2:	64 e0       	ldi	r22, 0x04	; 4
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     4da:	65 e0       	ldi	r22, 0x05	; 5
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(800);
     4e2:	60 e2       	ldi	r22, 0x20	; 32
     4e4:	73 e0       	ldi	r23, 0x03	; 3
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     4ee:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_6 ) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     4f0:	85 30       	cpi	r24, 0x05	; 5
     4f2:	49 f5       	brne	.+82     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
			{
				LED_off(LED1_PORT , LED1_PIN);
     4f4:	62 e0       	ldi	r22, 0x02	; 2
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     4fc:	63 e0       	ldi	r22, 0x03	; 3
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     504:	64 e0       	ldi	r22, 0x04	; 4
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     50c:	65 e0       	ldi	r22, 0x05	; 5
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(200);
     514:	68 ec       	ldi	r22, 0xC8	; 200
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     520:	63 e0       	ldi	r22, 0x03	; 3
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     528:	64 e0       	ldi	r22, 0x04	; 4
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     530:	65 e0       	ldi	r22, 0x05	; 5
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(800);
     538:	60 e2       	ldi	r22, 0x20	; 32
     53a:	73 e0       	ldi	r23, 0x03	; 3
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     544:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_7 ) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     546:	86 30       	cpi	r24, 0x06	; 6
     548:	29 f5       	brne	.+74     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
			{
				LED_off(LED1_PORT , LED1_PIN);
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     552:	63 e0       	ldi	r22, 0x03	; 3
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     55a:	64 e0       	ldi	r22, 0x04	; 4
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     562:	65 e0       	ldi	r22, 0x05	; 5
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(200);
     56a:	68 ec       	ldi	r22, 0xC8	; 200
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     576:	64 e0       	ldi	r22, 0x04	; 4
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     57e:	65 e0       	ldi	r22, 0x05	; 5
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(800);
     586:	60 e2       	ldi	r22, 0x20	; 32
     588:	73 e0       	ldi	r23, 0x03	; 3
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     592:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_8 ) /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     594:	87 30       	cpi	r24, 0x07	; 7
     596:	09 f0       	breq	.+2      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
     598:	61 c3       	rjmp	.+1730   	; 0xc5c <__stack+0x3fd>
			{
				LED_off(LED1_PORT , LED1_PIN);
     59a:	62 e0       	ldi	r22, 0x02	; 2
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     5a2:	63 e0       	ldi	r22, 0x03	; 3
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     5aa:	64 e0       	ldi	r22, 0x04	; 4
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     5b2:	65 e0       	ldi	r22, 0x05	; 5
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(200);
     5ba:	68 ec       	ldi	r22, 0xC8	; 200
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     5c6:	65 e0       	ldi	r22, 0x05	; 5
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(800);
     5ce:	60 e2       	ldi	r22, 0x20	; 32
     5d0:	73 e0       	ldi	r23, 0x03	; 3
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     5da:	08 95       	ret
		}
		break ;
		
		case BLINK_MODE_3 :
		{
			if ( u8_gs_LED_mode == LED_MODE_1 ) /** ALL LEDs ARE OFF **/
     5dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     5e0:	81 11       	cpse	r24, r1
     5e2:	11 c0       	rjmp	.+34     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
			{
				LED_off(LED1_PORT , LED1_PIN);
     5e4:	62 e0       	ldi	r22, 0x02	; 2
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     5ec:	63 e0       	ldi	r22, 0x03	; 3
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     5f4:	64 e0       	ldi	r22, 0x04	; 4
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     5fc:	65 e0       	ldi	r22, 0x05	; 5
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
     604:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_2 ) /** LED 1 IS BLINKING **/
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	a9 f4       	brne	.+42     	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
			{
				LED_on(LED1_PORT , LED1_PIN);
     60a:	62 e0       	ldi	r22, 0x02	; 2
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(300);
     612:	6c e2       	ldi	r22, 0x2C	; 44
     614:	71 e0       	ldi	r23, 0x01	; 1
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     61e:	62 e0       	ldi	r22, 0x02	; 2
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(700);
     626:	6c eb       	ldi	r22, 0xBC	; 188
     628:	72 e0       	ldi	r23, 0x02	; 2
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     632:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_3 ) /** LED 1 , 2 ARE BLINKING **/
     634:	82 30       	cpi	r24, 0x02	; 2
     636:	e1 f4       	brne	.+56     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
			{
				LED_on(LED1_PORT , LED1_PIN);
     638:	62 e0       	ldi	r22, 0x02	; 2
     63a:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     63e:	63 e0       	ldi	r22, 0x03	; 3
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(300);
     646:	6c e2       	ldi	r22, 0x2C	; 44
     648:	71 e0       	ldi	r23, 0x01	; 1
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     652:	62 e0       	ldi	r22, 0x02	; 2
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     65a:	63 e0       	ldi	r22, 0x03	; 3
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(700);
     662:	6c eb       	ldi	r22, 0xBC	; 188
     664:	72 e0       	ldi	r23, 0x02	; 2
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     66e:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_4 ) /** LED 1 , 2 , 3  ARE BLINKING **/
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	29 f5       	brne	.+74     	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
			{
				LED_on(LED1_PORT , LED1_PIN);
     674:	62 e0       	ldi	r22, 0x02	; 2
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     67c:	63 e0       	ldi	r22, 0x03	; 3
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     684:	64 e0       	ldi	r22, 0x04	; 4
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(300);
     68c:	6c e2       	ldi	r22, 0x2C	; 44
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     698:	62 e0       	ldi	r22, 0x02	; 2
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     6a0:	63 e0       	ldi	r22, 0x03	; 3
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     6a8:	64 e0       	ldi	r22, 0x04	; 4
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(700);
     6b0:	6c eb       	ldi	r22, 0xBC	; 188
     6b2:	72 e0       	ldi	r23, 0x02	; 2
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     6bc:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_5 ) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	69 f5       	brne	.+90     	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
			{
				LED_on(LED1_PORT , LED1_PIN);
     6c2:	62 e0       	ldi	r22, 0x02	; 2
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     6ca:	63 e0       	ldi	r22, 0x03	; 3
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     6d2:	64 e0       	ldi	r22, 0x04	; 4
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     6da:	65 e0       	ldi	r22, 0x05	; 5
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(300);
     6e2:	6c e2       	ldi	r22, 0x2C	; 44
     6e4:	71 e0       	ldi	r23, 0x01	; 1
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     6ee:	62 e0       	ldi	r22, 0x02	; 2
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     6f6:	63 e0       	ldi	r22, 0x03	; 3
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     6fe:	64 e0       	ldi	r22, 0x04	; 4
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     706:	65 e0       	ldi	r22, 0x05	; 5
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(700);
     70e:	6c eb       	ldi	r22, 0xBC	; 188
     710:	72 e0       	ldi	r23, 0x02	; 2
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     71a:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_6 ) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     71c:	85 30       	cpi	r24, 0x05	; 5
     71e:	49 f5       	brne	.+82     	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
			{
				LED_off(LED1_PORT , LED1_PIN);
     720:	62 e0       	ldi	r22, 0x02	; 2
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     728:	63 e0       	ldi	r22, 0x03	; 3
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     730:	64 e0       	ldi	r22, 0x04	; 4
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     738:	65 e0       	ldi	r22, 0x05	; 5
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(300);
     740:	6c e2       	ldi	r22, 0x2C	; 44
     742:	71 e0       	ldi	r23, 0x01	; 1
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     74c:	63 e0       	ldi	r22, 0x03	; 3
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     754:	64 e0       	ldi	r22, 0x04	; 4
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     75c:	65 e0       	ldi	r22, 0x05	; 5
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(700);
     764:	6c eb       	ldi	r22, 0xBC	; 188
     766:	72 e0       	ldi	r23, 0x02	; 2
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     770:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_7 ) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     772:	86 30       	cpi	r24, 0x06	; 6
     774:	29 f5       	brne	.+74     	; 0x7c0 <__EEPROM_REGION_LENGTH__+0x3c0>
			{
				LED_off(LED1_PORT , LED1_PIN);
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     77e:	63 e0       	ldi	r22, 0x03	; 3
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     786:	64 e0       	ldi	r22, 0x04	; 4
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     78e:	65 e0       	ldi	r22, 0x05	; 5
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(300);
     796:	6c e2       	ldi	r22, 0x2C	; 44
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     7a2:	64 e0       	ldi	r22, 0x04	; 4
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     7aa:	65 e0       	ldi	r22, 0x05	; 5
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(700);
     7b2:	6c eb       	ldi	r22, 0xBC	; 188
     7b4:	72 e0       	ldi	r23, 0x02	; 2
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     7be:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_8 ) /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     7c0:	87 30       	cpi	r24, 0x07	; 7
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
     7c4:	4b c2       	rjmp	.+1174   	; 0xc5c <__stack+0x3fd>
			{
				LED_off(LED1_PORT , LED1_PIN);
     7c6:	62 e0       	ldi	r22, 0x02	; 2
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     7ce:	63 e0       	ldi	r22, 0x03	; 3
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     7d6:	64 e0       	ldi	r22, 0x04	; 4
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     7de:	65 e0       	ldi	r22, 0x05	; 5
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(300);
     7e6:	6c e2       	ldi	r22, 0x2C	; 44
     7e8:	71 e0       	ldi	r23, 0x01	; 1
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     7f2:	65 e0       	ldi	r22, 0x05	; 5
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(700);
     7fa:	6c eb       	ldi	r22, 0xBC	; 188
     7fc:	72 e0       	ldi	r23, 0x02	; 2
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     806:	08 95       	ret
		}
		break ;
		
		case BLINK_MODE_4 :
		{
			if ( u8_gs_LED_mode == LED_MODE_1 ) /** ALL LEDs ARE OFF **/
     808:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     80c:	81 11       	cpse	r24, r1
     80e:	11 c0       	rjmp	.+34     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
			{
				LED_off(LED1_PORT , LED1_PIN);
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     818:	63 e0       	ldi	r22, 0x03	; 3
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     820:	64 e0       	ldi	r22, 0x04	; 4
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     828:	65 e0       	ldi	r22, 0x05	; 5
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
     830:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_2 ) /** LED 1 IS BLINKING **/
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	a9 f4       	brne	.+42     	; 0x860 <__stack+0x1>
			{
				LED_on(LED1_PORT , LED1_PIN);
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(500);
     83e:	64 ef       	ldi	r22, 0xF4	; 244
     840:	71 e0       	ldi	r23, 0x01	; 1
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     84a:	62 e0       	ldi	r22, 0x02	; 2
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(500);
     852:	64 ef       	ldi	r22, 0xF4	; 244
     854:	71 e0       	ldi	r23, 0x01	; 1
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     85e:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_3 ) /** LED 1 , 2 ARE BLINKING **/
     860:	82 30       	cpi	r24, 0x02	; 2
     862:	e1 f4       	brne	.+56     	; 0x89c <__stack+0x3d>
			{
				LED_on(LED1_PORT , LED1_PIN);
     864:	62 e0       	ldi	r22, 0x02	; 2
     866:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     86a:	63 e0       	ldi	r22, 0x03	; 3
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(500);
     872:	64 ef       	ldi	r22, 0xF4	; 244
     874:	71 e0       	ldi	r23, 0x01	; 1
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     87e:	62 e0       	ldi	r22, 0x02	; 2
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     886:	63 e0       	ldi	r22, 0x03	; 3
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(500);
     88e:	64 ef       	ldi	r22, 0xF4	; 244
     890:	71 e0       	ldi	r23, 0x01	; 1
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     89a:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_4 ) /** LED 1 , 2 , 3  ARE BLINKING **/
     89c:	83 30       	cpi	r24, 0x03	; 3
     89e:	29 f5       	brne	.+74     	; 0x8ea <__stack+0x8b>
			{
				LED_on(LED1_PORT , LED1_PIN);
     8a0:	62 e0       	ldi	r22, 0x02	; 2
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     8a8:	63 e0       	ldi	r22, 0x03	; 3
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     8b0:	64 e0       	ldi	r22, 0x04	; 4
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(500);
     8b8:	64 ef       	ldi	r22, 0xF4	; 244
     8ba:	71 e0       	ldi	r23, 0x01	; 1
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     8cc:	63 e0       	ldi	r22, 0x03	; 3
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     8d4:	64 e0       	ldi	r22, 0x04	; 4
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(500);
     8dc:	64 ef       	ldi	r22, 0xF4	; 244
     8de:	71 e0       	ldi	r23, 0x01	; 1
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     8e8:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_5 ) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     8ea:	84 30       	cpi	r24, 0x04	; 4
     8ec:	69 f5       	brne	.+90     	; 0x948 <__stack+0xe9>
			{
				LED_on(LED1_PORT , LED1_PIN);
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     8f6:	63 e0       	ldi	r22, 0x03	; 3
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     8fe:	64 e0       	ldi	r22, 0x04	; 4
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     906:	65 e0       	ldi	r22, 0x05	; 5
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(500);
     90e:	64 ef       	ldi	r22, 0xF4	; 244
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     91a:	62 e0       	ldi	r22, 0x02	; 2
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     922:	63 e0       	ldi	r22, 0x03	; 3
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     92a:	64 e0       	ldi	r22, 0x04	; 4
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     932:	65 e0       	ldi	r22, 0x05	; 5
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(500);
     93a:	64 ef       	ldi	r22, 0xF4	; 244
     93c:	71 e0       	ldi	r23, 0x01	; 1
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     946:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_6 ) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     948:	85 30       	cpi	r24, 0x05	; 5
     94a:	49 f5       	brne	.+82     	; 0x99e <__stack+0x13f>
			{
				LED_off(LED1_PORT , LED1_PIN);
     94c:	62 e0       	ldi	r22, 0x02	; 2
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     954:	63 e0       	ldi	r22, 0x03	; 3
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     95c:	64 e0       	ldi	r22, 0x04	; 4
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     964:	65 e0       	ldi	r22, 0x05	; 5
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(500);
     96c:	64 ef       	ldi	r22, 0xF4	; 244
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     978:	63 e0       	ldi	r22, 0x03	; 3
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     980:	64 e0       	ldi	r22, 0x04	; 4
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     988:	65 e0       	ldi	r22, 0x05	; 5
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(500);
     990:	64 ef       	ldi	r22, 0xF4	; 244
     992:	71 e0       	ldi	r23, 0x01	; 1
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     99c:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_7 ) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     99e:	86 30       	cpi	r24, 0x06	; 6
     9a0:	29 f5       	brne	.+74     	; 0x9ec <__stack+0x18d>
			{
				LED_off(LED1_PORT , LED1_PIN);
     9a2:	62 e0       	ldi	r22, 0x02	; 2
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     9aa:	63 e0       	ldi	r22, 0x03	; 3
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     9b2:	64 e0       	ldi	r22, 0x04	; 4
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     9ba:	65 e0       	ldi	r22, 0x05	; 5
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(500);
     9c2:	64 ef       	ldi	r22, 0xF4	; 244
     9c4:	71 e0       	ldi	r23, 0x01	; 1
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     9ce:	64 e0       	ldi	r22, 0x04	; 4
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     9d6:	65 e0       	ldi	r22, 0x05	; 5
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(500);
     9de:	64 ef       	ldi	r22, 0xF4	; 244
     9e0:	71 e0       	ldi	r23, 0x01	; 1
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     9ea:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_8 ) /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     9ec:	87 30       	cpi	r24, 0x07	; 7
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0x193>
     9f0:	35 c1       	rjmp	.+618    	; 0xc5c <__stack+0x3fd>
			{
				LED_off(LED1_PORT , LED1_PIN);
     9f2:	62 e0       	ldi	r22, 0x02	; 2
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     9fa:	63 e0       	ldi	r22, 0x03	; 3
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     a02:	64 e0       	ldi	r22, 0x04	; 4
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     a0a:	65 e0       	ldi	r22, 0x05	; 5
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(500);
     a12:	64 ef       	ldi	r22, 0xF4	; 244
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     a1e:	65 e0       	ldi	r22, 0x05	; 5
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(500);
     a26:	64 ef       	ldi	r22, 0xF4	; 244
     a28:	71 e0       	ldi	r23, 0x01	; 1
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     a32:	08 95       	ret
		}
		break;
		
		case BLINK_MODE_5 :
		{
			if ( u8_gs_LED_mode == LED_MODE_1 ) /** ALL LEDs ARE OFF **/
     a34:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a38:	81 11       	cpse	r24, r1
     a3a:	11 c0       	rjmp	.+34     	; 0xa5e <__stack+0x1ff>
			{
				LED_off(LED1_PORT , LED1_PIN);
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     a44:	63 e0       	ldi	r22, 0x03	; 3
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     a4c:	64 e0       	ldi	r22, 0x04	; 4
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     a54:	65 e0       	ldi	r22, 0x05	; 5
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
     a5c:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_2 ) /** LED 1 IS BLINKING **/
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	a9 f4       	brne	.+42     	; 0xa8c <__stack+0x22d>
			{
				LED_on(LED1_PORT , LED1_PIN);
     a62:	62 e0       	ldi	r22, 0x02	; 2
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(800);
     a6a:	60 e2       	ldi	r22, 0x20	; 32
     a6c:	73 e0       	ldi	r23, 0x03	; 3
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(200);
     a7e:	68 ec       	ldi	r22, 0xC8	; 200
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     a8a:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_3 ) /** LED 1 , 2 ARE BLINKING **/
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	e1 f4       	brne	.+56     	; 0xac8 <__stack+0x269>
			{
				LED_on(LED1_PORT , LED1_PIN);
     a90:	62 e0       	ldi	r22, 0x02	; 2
     a92:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     a96:	63 e0       	ldi	r22, 0x03	; 3
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(800);
     a9e:	60 e2       	ldi	r22, 0x20	; 32
     aa0:	73 e0       	ldi	r23, 0x03	; 3
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     aaa:	62 e0       	ldi	r22, 0x02	; 2
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     ab2:	63 e0       	ldi	r22, 0x03	; 3
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(200);
     aba:	68 ec       	ldi	r22, 0xC8	; 200
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     ac6:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_4 ) /** LED 1 , 2 , 3  ARE BLINKING **/
     ac8:	83 30       	cpi	r24, 0x03	; 3
     aca:	29 f5       	brne	.+74     	; 0xb16 <__stack+0x2b7>
			{
				LED_on(LED1_PORT , LED1_PIN);
     acc:	62 e0       	ldi	r22, 0x02	; 2
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     ad4:	63 e0       	ldi	r22, 0x03	; 3
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     adc:	64 e0       	ldi	r22, 0x04	; 4
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(800);
     ae4:	60 e2       	ldi	r22, 0x20	; 32
     ae6:	73 e0       	ldi	r23, 0x03	; 3
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     af0:	62 e0       	ldi	r22, 0x02	; 2
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     af8:	63 e0       	ldi	r22, 0x03	; 3
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     b00:	64 e0       	ldi	r22, 0x04	; 4
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(200);
     b08:	68 ec       	ldi	r22, 0xC8	; 200
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     b14:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_5 ) /** LED 1 , 2 , 3 , 4  ARE BLINKING **/
     b16:	84 30       	cpi	r24, 0x04	; 4
     b18:	69 f5       	brne	.+90     	; 0xb74 <__stack+0x315>
			{
				LED_on(LED1_PORT , LED1_PIN);
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED2_PORT , LED2_PIN);
     b22:	63 e0       	ldi	r22, 0x03	; 3
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     b2a:	64 e0       	ldi	r22, 0x04	; 4
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     b32:	65 e0       	ldi	r22, 0x05	; 5
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(800);
     b3a:	60 e2       	ldi	r22, 0x20	; 32
     b3c:	73 e0       	ldi	r23, 0x03	; 3
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED1_PORT , LED1_PIN);
     b46:	62 e0       	ldi	r22, 0x02	; 2
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     b4e:	63 e0       	ldi	r22, 0x03	; 3
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     b56:	64 e0       	ldi	r22, 0x04	; 4
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     b5e:	65 e0       	ldi	r22, 0x05	; 5
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(200);
     b66:	68 ec       	ldi	r22, 0xC8	; 200
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     b72:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_6 ) /** LED 1 IS OFF AND  2 , 3 , 4  ARE BLINKING **/
     b74:	85 30       	cpi	r24, 0x05	; 5
     b76:	49 f5       	brne	.+82     	; 0xbca <__stack+0x36b>
			{
				LED_off(LED1_PORT , LED1_PIN);
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED2_PORT , LED2_PIN);
     b80:	63 e0       	ldi	r22, 0x03	; 3
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED3_PORT , LED3_PIN);
     b88:	64 e0       	ldi	r22, 0x04	; 4
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     b90:	65 e0       	ldi	r22, 0x05	; 5
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(800);
     b98:	60 e2       	ldi	r22, 0x20	; 32
     b9a:	73 e0       	ldi	r23, 0x03	; 3
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED2_PORT , LED2_PIN);
     ba4:	63 e0       	ldi	r22, 0x03	; 3
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     bac:	64 e0       	ldi	r22, 0x04	; 4
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     bb4:	65 e0       	ldi	r22, 0x05	; 5
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(200);
     bbc:	68 ec       	ldi	r22, 0xC8	; 200
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     bc8:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_7 ) /** LED 1 , 2 ARE OFF AND  3 , 4  ARE BLINKING **/
     bca:	86 30       	cpi	r24, 0x06	; 6
     bcc:	29 f5       	brne	.+74     	; 0xc18 <__stack+0x3b9>
			{
				LED_off(LED1_PORT , LED1_PIN);
     bce:	62 e0       	ldi	r22, 0x02	; 2
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     bd6:	63 e0       	ldi	r22, 0x03	; 3
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED3_PORT , LED3_PIN);
     bde:	64 e0       	ldi	r22, 0x04	; 4
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				LED_on(LED4_PORT , LED4_PIN);
     be6:	65 e0       	ldi	r22, 0x05	; 5
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(800);
     bee:	60 e2       	ldi	r22, 0x20	; 32
     bf0:	73 e0       	ldi	r23, 0x03	; 3
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED3_PORT , LED3_PIN);
     bfa:	64 e0       	ldi	r22, 0x04	; 4
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED4_PORT , LED4_PIN);
     c02:	65 e0       	ldi	r22, 0x05	; 5
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(200);
     c0a:	68 ec       	ldi	r22, 0xC8	; 200
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     c16:	08 95       	ret
			}
			
			else if( u8_gs_LED_mode == LED_MODE_8 ) /** LED 1 , 2 , 3 ARE OFF AND  4  IS BLINKING **/
     c18:	87 30       	cpi	r24, 0x07	; 7
     c1a:	01 f5       	brne	.+64     	; 0xc5c <__stack+0x3fd>
			{
				LED_off(LED1_PORT , LED1_PIN);
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED2_PORT , LED2_PIN);
     c24:	63 e0       	ldi	r22, 0x03	; 3
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				LED_off(LED3_PORT , LED3_PIN);
     c2c:	64 e0       	ldi	r22, 0x04	; 4
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				
				LED_on(LED4_PORT , LED4_PIN);
     c34:	65 e0       	ldi	r22, 0x05	; 5
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	0e 94 55 06 	call	0xcaa	; 0xcaa <LED_on>
				TMR0_delay_ms(800);
     c3c:	60 e2       	ldi	r22, 0x20	; 32
     c3e:	73 e0       	ldi	r23, 0x03	; 3
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
				LED_off(LED4_PORT , LED4_PIN);
     c48:	65 e0       	ldi	r22, 0x05	; 5
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_off>
				TMR0_delay_ms(200);
     c50:	68 ec       	ldi	r22, 0xC8	; 200
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 ae 07 	call	0xf5c	; 0xf5c <TMR0_delay_ms>
     c5c:	08 95       	ret

00000c5e <__vector_1>:
}


/** ISR OF INT0  **/
ISR(INT0_vect)
{
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	8f 93       	push	r24
	u8_gs_blinking_mode++ ; /** CHANGE THE BLINKING MODE **/
     c6a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <u8_gs_blinking_mode>
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_gs_blinking_mode>
}
     c74:	8f 91       	pop	r24
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <__vector_2>:

/** ISR OF INT1 **/
ISR(INT1_vect)
{
     c80:	1f 92       	push	r1
     c82:	0f 92       	push	r0
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	0f 92       	push	r0
     c88:	11 24       	eor	r1, r1
     c8a:	8f 93       	push	r24
	u8_gs_LED_mode++ ;  /** CHANGE THE LEDs **/
     c8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     c96:	8f 91       	pop	r24
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <LED_init>:
{
	enu_dio_error_status_t enu_l_ledpin_status  = DIO_SUCCEED ;   /** LOCAL VARIABLE TO STORE THE RETURN ERROR STATUS OF LED DIO PIN **/
	
	enu_led_error_status_t enu_l_ledinit_status = LED_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/ 
	
	enu_l_ledpin_status = DIO_setpindir(u8_a_ledport , u8_a_ledpin , DIO_PIN_OUTPUT);  /** SET THE LED PIN AS OUTPUT **/
     ca2:	41 e0       	ldi	r20, 0x01	; 1
     ca4:	0e 94 66 06 	call	0xccc	; 0xccc <DIO_setpindir>
	
	else
	{
		enu_l_ledinit_status = LED_FAILURE ; /** RETUTN FAILURE **/
	}
}
     ca8:	08 95       	ret

00000caa <LED_on>:
{
	enu_dio_error_status_t enu_l_ledpin_status  = DIO_SUCCEED ;    /** LOCAL VARIABLE TO STORE THE RETURN ERROR STATUS OF LED DIO PIN **/
	
	enu_led_error_status_t enu_l_ledon_status   = LED_SUCCEED ;    /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/
	
	enu_l_ledpin_status = DIO_setpinvalue(u8_a_ledport , u8_a_ledpin , DIO_PIN_HIGH); /** SET THE OUTPUT PIN AS HIGH **/
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 e5 06 	call	0xdca	; 0xdca <DIO_setpinvalue>
	
	if ( enu_l_ledpin_status == DIO_SUCCEED )
     cb0:	81 11       	cpse	r24, r1
		/** DO NOTHING **/
	}
	
	else
	{
		enu_l_ledon_status  = LED_FAILURE ;  /** RETURN FAILURE **/
     cb2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_l_ledon_status ;  /** RETURN THE FUNCTION FINAL STATUS **/
}
     cb4:	08 95       	ret

00000cb6 <LED_off>:
{
	enu_dio_error_status_t enu_l_ledpin_status  = DIO_SUCCEED ;    /** LOCAL VARIABLE TO STORE THE RETURN ERROR STATUS OF LED DIO PIN **/
	
	enu_led_error_status_t enu_l_ledoff_status   = LED_SUCCEED ;    /** LOCAL VARIABLE TO RETURN THE FUNCTION ERROR STATUS **/
	
	enu_l_ledpin_status = DIO_setpinvalue(u8_a_ledport , u8_a_ledpin , DIO_PIN_LOW); /** SET THE OUTPUT PIN AS LOW **/
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	0e 94 e5 06 	call	0xdca	; 0xdca <DIO_setpinvalue>
	
	if ( enu_l_ledpin_status == DIO_SUCCEED )
     cbc:	81 11       	cpse	r24, r1
		/** DO NOTHING **/
	}
	
	else
	{
		enu_l_ledoff_status = LED_FAILURE ; /** RETURN FAILURE **/
     cbe:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_l_ledoff_status ;  /** RETURN THE FUNCTION FINAL STATUS **/
}
     cc0:	08 95       	ret

00000cc2 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init();
     cc2:	0e 94 80 00 	call	0x100	; 0x100 <APP_init>

	while (1)
	{
		APP_start();
     cc6:	0e 94 a3 00 	call	0x146	; 0x146 <APP_start>
     cca:	fd cf       	rjmp	.-6      	; 0xcc6 <main+0x4>

00000ccc <DIO_setpindir>:
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir)            /** SWITCH CASE ON THE DIRECTION VALUE **/
     ccc:	44 23       	and	r20, r20
     cce:	19 f0       	breq	.+6      	; 0xcd6 <DIO_setpindir+0xa>
     cd0:	41 30       	cpi	r20, 0x01	; 1
     cd2:	e9 f1       	breq	.+122    	; 0xd4e <DIO_setpindir+0x82>
     cd4:	74 c0       	rjmp	.+232    	; 0xdbe <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:        /** INPUT CASE  **/
		{
			switch(u8_a_portid)    /** SWITCH CASE ON THE PORT ID **/
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	99 f0       	breq	.+38     	; 0xd00 <DIO_setpindir+0x34>
     cda:	28 f0       	brcs	.+10     	; 0xce6 <DIO_setpindir+0x1a>
     cdc:	82 30       	cpi	r24, 0x02	; 2
     cde:	e9 f0       	breq	.+58     	; 0xd1a <DIO_setpindir+0x4e>
     ce0:	83 30       	cpi	r24, 0x03	; 3
     ce2:	41 f1       	breq	.+80     	; 0xd34 <DIO_setpindir+0x68>
     ce4:	6e c0       	rjmp	.+220    	; 0xdc2 <DIO_setpindir+0xf6>
			{
				case DIO_PORTA:
				clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     ce6:	2a b3       	in	r18, 0x1a	; 26
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_setpindir+0x26>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	6a 95       	dec	r22
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_setpindir+0x22>
     cf6:	80 95       	com	r24
     cf8:	82 23       	and	r24, r18
     cfa:	8a bb       	out	0x1a, r24	; 26
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     cfc:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)    /** SWITCH CASE ON THE PORT ID **/
			{
				case DIO_PORTA:
				clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
				break ;
     cfe:	08 95       	ret
				
				case DIO_PORTB:
				clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     d00:	27 b3       	in	r18, 0x17	; 23
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_setpindir+0x40>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	6a 95       	dec	r22
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_setpindir+0x3c>
     d10:	80 95       	com	r24
     d12:	82 23       	and	r24, r18
     d14:	87 bb       	out	0x17, r24	; 23
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d16:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
				break ;
				
				case DIO_PORTB:
				clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
				break ;
     d18:	08 95       	ret
				
				case DIO_PORTC:
				clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     d1a:	24 b3       	in	r18, 0x14	; 20
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_setpindir+0x5a>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	6a 95       	dec	r22
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_setpindir+0x56>
     d2a:	80 95       	com	r24
     d2c:	82 23       	and	r24, r18
     d2e:	84 bb       	out	0x14, r24	; 20
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d30:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
				break ;
				
				case DIO_PORTC:
				clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
				break ;
     d32:	08 95       	ret
				
				case DIO_PORTD:
				clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     d34:	21 b3       	in	r18, 0x11	; 17
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_setpindir+0x74>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	6a 95       	dec	r22
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_setpindir+0x70>
     d44:	80 95       	com	r24
     d46:	82 23       	and	r24, r18
     d48:	81 bb       	out	0x11, r24	; 17
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d4a:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
				break ;
				
				case DIO_PORTD:
				clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
				break ;
     d4c:	08 95       	ret
		}
		
		
		case DIO_PIN_OUTPUT:              /** OUTPUT CASE  **/
		{
			switch(u8_a_portid)           /** SWITCH CASE ON THE PORT ID */
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 f0       	breq	.+36     	; 0xd76 <DIO_setpindir+0xaa>
     d52:	28 f0       	brcs	.+10     	; 0xd5e <DIO_setpindir+0x92>
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	d9 f0       	breq	.+54     	; 0xd8e <DIO_setpindir+0xc2>
     d58:	83 30       	cpi	r24, 0x03	; 3
     d5a:	29 f1       	breq	.+74     	; 0xda6 <DIO_setpindir+0xda>
     d5c:	34 c0       	rjmp	.+104    	; 0xdc6 <DIO_setpindir+0xfa>
			{
				case DIO_PORTA:
				set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     d5e:	2a b3       	in	r18, 0x1a	; 26
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_setpindir+0x9e>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	6a 95       	dec	r22
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_setpindir+0x9a>
     d6e:	82 2b       	or	r24, r18
     d70:	8a bb       	out	0x1a, r24	; 26
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d72:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)           /** SWITCH CASE ON THE PORT ID */
			{
				case DIO_PORTA:
				set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
     d74:	08 95       	ret
				
				case DIO_PORTB:
				set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     d76:	27 b3       	in	r18, 0x17	; 23
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_setpindir+0xb6>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	6a 95       	dec	r22
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_setpindir+0xb2>
     d86:	82 2b       	or	r24, r18
     d88:	87 bb       	out	0x17, r24	; 23
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d8a:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				case DIO_PORTB:
				set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
     d8c:	08 95       	ret
				
				case DIO_PORTC:
				set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     d8e:	24 b3       	in	r18, 0x14	; 20
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_setpindir+0xce>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	6a 95       	dec	r22
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_setpindir+0xca>
     d9e:	82 2b       	or	r24, r18
     da0:	84 bb       	out	0x14, r24	; 20
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     da2:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				case DIO_PORTC:
				set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
     da4:	08 95       	ret
				
				case DIO_PORTD:
				set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     da6:	21 b3       	in	r18, 0x11	; 17
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_setpindir+0xe6>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	6a 95       	dec	r22
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_setpindir+0xe2>
     db6:	82 2b       	or	r24, r18
     db8:	81 bb       	out	0x11, r24	; 17
/* INPUT        : PORT , PINID , DIRECTION                             */
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	enu_dio_error_status_t enu_l_setpindir_state = DIO_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     dba:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				case DIO_PORTD:
				set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
     dbc:	08 95       	ret
		}
		
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		
		enu_l_setpindir_state = DIO_FAILURE ; /** RETURN AS DIR NOT VALID ERRORS **/
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	08 95       	ret
				case DIO_PORTD:
				clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
				break ;
				
				default: 
				enu_l_setpindir_state = DIO_FAILURE ;   /** RETURN AS DIR NOT VALID ERRORS **/
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	08 95       	ret
				case DIO_PORTD:
				set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
				break ;
				
				default:  
				enu_l_setpindir_state = DIO_FAILURE ; /** RETURN AS DIR NOT VALID ERRORS **/
     dc6:	81 e0       	ldi	r24, 0x01	; 1
		
		break ; 
	} 
	
	return enu_l_setpindir_state ; /** RETURN THE STATE OF FUNCTION **/
}
     dc8:	08 95       	ret

00000dca <DIO_setpinvalue>:
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     dca:	44 23       	and	r20, r20
     dcc:	19 f0       	breq	.+6      	; 0xdd4 <DIO_setpinvalue+0xa>
     dce:	41 30       	cpi	r20, 0x01	; 1
     dd0:	e9 f1       	breq	.+122    	; 0xe4c <DIO_setpinvalue+0x82>
     dd2:	74 c0       	rjmp	.+232    	; 0xebc <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:            /** IN CASE PIN VALUE IS LOW  **/
		{
			switch(u8_a_portid)     /** SWITCH CASE ON THE PORT ID **/
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	99 f0       	breq	.+38     	; 0xdfe <DIO_setpinvalue+0x34>
     dd8:	28 f0       	brcs	.+10     	; 0xde4 <DIO_setpinvalue+0x1a>
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	e9 f0       	breq	.+58     	; 0xe18 <DIO_setpinvalue+0x4e>
     dde:	83 30       	cpi	r24, 0x03	; 3
     de0:	41 f1       	breq	.+80     	; 0xe32 <DIO_setpinvalue+0x68>
     de2:	6e c0       	rjmp	.+220    	; 0xec0 <DIO_setpinvalue+0xf6>
			{
				case DIO_PORTA:
				clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     de4:	2b b3       	in	r18, 0x1b	; 27
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_setpinvalue+0x26>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	6a 95       	dec	r22
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_setpinvalue+0x22>
     df4:	80 95       	com	r24
     df6:	82 23       	and	r24, r18
     df8:	8b bb       	out	0x1b, r24	; 27
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     dfa:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)     /** SWITCH CASE ON THE PORT ID **/
			{
				case DIO_PORTA:
				clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
     dfc:	08 95       	ret
				
				case DIO_PORTB:
				clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     dfe:	28 b3       	in	r18, 0x18	; 24
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_setpinvalue+0x40>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	6a 95       	dec	r22
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_setpinvalue+0x3c>
     e0e:	80 95       	com	r24
     e10:	82 23       	and	r24, r18
     e12:	88 bb       	out	0x18, r24	; 24
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e14:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				case DIO_PORTB:
				clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
     e16:	08 95       	ret
				
				case DIO_PORTC:
				clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     e18:	25 b3       	in	r18, 0x15	; 21
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_setpinvalue+0x5a>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	6a 95       	dec	r22
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_setpinvalue+0x56>
     e28:	80 95       	com	r24
     e2a:	82 23       	and	r24, r18
     e2c:	85 bb       	out	0x15, r24	; 21
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e2e:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				case DIO_PORTC:
				clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
     e30:	08 95       	ret
				
				case DIO_PORTD:
				clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     e32:	22 b3       	in	r18, 0x12	; 18
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_setpinvalue+0x74>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	6a 95       	dec	r22
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_setpinvalue+0x70>
     e42:	80 95       	com	r24
     e44:	82 23       	and	r24, r18
     e46:	82 bb       	out	0x12, r24	; 18
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e48:	80 e0       	ldi	r24, 0x00	; 0
				clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				case DIO_PORTD:
				clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
     e4a:	08 95       	ret
		}
		
		
		case DIO_PIN_HIGH:        /** IN CASE PIN VALUE IS HIGH **/
		{
			switch(u8_a_portid)   /** SWITCH CASE ON THE PORT ID **/
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	91 f0       	breq	.+36     	; 0xe74 <DIO_setpinvalue+0xaa>
     e50:	28 f0       	brcs	.+10     	; 0xe5c <DIO_setpinvalue+0x92>
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	d9 f0       	breq	.+54     	; 0xe8c <DIO_setpinvalue+0xc2>
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	29 f1       	breq	.+74     	; 0xea4 <DIO_setpinvalue+0xda>
     e5a:	34 c0       	rjmp	.+104    	; 0xec4 <DIO_setpinvalue+0xfa>
			{
				case DIO_PORTA:
				set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     e5c:	2b b3       	in	r18, 0x1b	; 27
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_setpinvalue+0x9e>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	6a 95       	dec	r22
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_setpinvalue+0x9a>
     e6c:	82 2b       	or	r24, r18
     e6e:	8b bb       	out	0x1b, r24	; 27
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e70:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(u8_a_portid)   /** SWITCH CASE ON THE PORT ID **/
			{
				case DIO_PORTA:
				set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
     e72:	08 95       	ret
				
				case DIO_PORTB:
				set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     e74:	28 b3       	in	r18, 0x18	; 24
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_setpinvalue+0xb6>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	6a 95       	dec	r22
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_setpinvalue+0xb2>
     e84:	82 2b       	or	r24, r18
     e86:	88 bb       	out	0x18, r24	; 24
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e88:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				case DIO_PORTB:
				set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
     e8a:	08 95       	ret
				
				case DIO_PORTC:
				set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     e8c:	25 b3       	in	r18, 0x15	; 21
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_setpinvalue+0xce>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	6a 95       	dec	r22
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_setpinvalue+0xca>
     e9c:	82 2b       	or	r24, r18
     e9e:	85 bb       	out	0x15, r24	; 21
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     ea0:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				case DIO_PORTC:
				set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
     ea2:	08 95       	ret
				
				case DIO_PORTD:
				set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     ea4:	22 b3       	in	r18, 0x12	; 18
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_setpinvalue+0xe6>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	6a 95       	dec	r22
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_setpinvalue+0xe2>
     eb4:	82 2b       	or	r24, r18
     eb6:	82 bb       	out	0x12, r24	; 18
/* RETURNS      : enu_dio_error_status_t                               */
/***********************************************************************/
enu_dio_error_status_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	enu_dio_error_status_t enu_l_setpinval_state = DIO_SUCCEED ;  /** LOCAL VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     eb8:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				case DIO_PORTD:
				set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
     eba:	08 95       	ret
			break ;   /** BREAK OF DIO_PIN_HIGH CASE **/
		}
		
		
		default :
		enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	08 95       	ret
				case DIO_PORTD:
				clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
				break ;
				
				default:
				enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	08 95       	ret
				case DIO_PORTD:
				set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
				break ;
				
				default:
				enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
     ec4:	81 e0       	ldi	r24, 0x01	; 1
		enu_l_setpinval_state = DIO_FAILURE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return enu_l_setpinval_state ;    /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
     ec6:	08 95       	ret

00000ec8 <EXTINT_setglobalinterrupt>:
		ptr_func_exint0_callback = ptr_func; /** TIMER0 GLOBAL POINTER POINTS TO THE PASSED FUNCTION **/
	}
	
	return enu_l_extint0_setcallback_error_status ; /** RETURN THE FUNCTION FINAL STATUS **/
	
}
     ec8:	8f b7       	in	r24, 0x3f	; 63
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	8f bf       	out	0x3f, r24	; 63
     ece:	08 95       	ret

00000ed0 <EXTINT0_init>:
     ed0:	0e 94 64 07 	call	0xec8	; 0xec8 <EXTINT_setglobalinterrupt>
     ed4:	85 b7       	in	r24, 0x35	; 53
     ed6:	81 60       	ori	r24, 0x01	; 1
     ed8:	85 bf       	out	0x35, r24	; 53
     eda:	85 b7       	in	r24, 0x35	; 53
     edc:	82 60       	ori	r24, 0x02	; 2
     ede:	85 bf       	out	0x35, r24	; 53
     ee0:	8b b7       	in	r24, 0x3b	; 59
     ee2:	80 64       	ori	r24, 0x40	; 64
     ee4:	8b bf       	out	0x3b, r24	; 59
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	08 95       	ret

00000eea <EXTINT1_init>:
/********************************************************/
enu_extint_error_status_t EXTINT1_init(void)
{
	enu_extint_error_status_t enu_l_extint1_init_error_status = EXT_INT_SUCCEED ; /** LOCAL VARIABLE TO RETURN THE FUNCTION STATUS **/
	
	EXTINT_setglobalinterrupt(); /** ENABLE GLOBAL INTERRUPTS **/
     eea:	0e 94 64 07 	call	0xec8	; 0xec8 <EXTINT_setglobalinterrupt>
	
		/** CONFIGURE THE INT1 TRIGGER EVENT **/
	#if EXTERNAL_INT1_TRIGGER  == INT_TRIGGER_RISING_EDGE 
	
		set_bit(MCUCR , 2);
     eee:	85 b7       	in	r24, 0x35	; 53
     ef0:	84 60       	ori	r24, 0x04	; 4
     ef2:	85 bf       	out	0x35, r24	; 53
		set_bit(MCUCR , 3);
     ef4:	85 b7       	in	r24, 0x35	; 53
     ef6:	88 60       	ori	r24, 0x08	; 8
     ef8:	85 bf       	out	0x35, r24	; 53
		enu_l_extint1_init_error_status = EXT_INT_FAILURE ;  /** RETURN FAILURE **/
	  
	#endif

     /** Enable INT1 **/
	set_bit(GICR , 7);
     efa:	8b b7       	in	r24, 0x3b	; 59
     efc:	80 68       	ori	r24, 0x80	; 128
     efe:	8b bf       	out	0x3b, r24	; 59
	
	return enu_l_extint1_init_error_status ;  /** RETURN THE FUNCTION FINAL STATUS **/
}
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	08 95       	ret

00000f04 <TMR0_init>:
/** ARGUMENTS  : void (*ptr)(void) (PINTER TO CALL BACK FUNCTION)      **/
/** RETURNS    : VOID                                                  **/
/************************************************************************/
void TMR0_setcallback( void (*ptr_func)(void) )
{
	ptr_func_tmr0_callback = ptr_func; /** TIMER0 GLOBAL POINTER POINTS TO THE PASSED FUNCTION **/
     f04:	83 b7       	in	r24, 0x33	; 51
     f06:	8f 77       	andi	r24, 0x7F	; 127
     f08:	83 bf       	out	0x33, r24	; 51
     f0a:	83 b7       	in	r24, 0x33	; 51
     f0c:	8f 7b       	andi	r24, 0xBF	; 191
     f0e:	83 bf       	out	0x33, r24	; 51
     f10:	83 b7       	in	r24, 0x33	; 51
     f12:	87 7f       	andi	r24, 0xF7	; 247
     f14:	83 bf       	out	0x33, r24	; 51
     f16:	83 b7       	in	r24, 0x33	; 51
     f18:	8f 7e       	andi	r24, 0xEF	; 239
     f1a:	83 bf       	out	0x33, r24	; 51
     f1c:	83 b7       	in	r24, 0x33	; 51
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	83 bf       	out	0x33, r24	; 51
     f22:	8f b7       	in	r24, 0x3f	; 63
     f24:	80 68       	ori	r24, 0x80	; 128
     f26:	8f bf       	out	0x3f, r24	; 63
     f28:	89 b7       	in	r24, 0x39	; 57
     f2a:	81 60       	ori	r24, 0x01	; 1
     f2c:	89 bf       	out	0x39, r24	; 57
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	08 95       	ret

00000f32 <TMR0_start>:
     f32:	83 b7       	in	r24, 0x33	; 51
     f34:	81 60       	ori	r24, 0x01	; 1
     f36:	83 bf       	out	0x33, r24	; 51
     f38:	83 b7       	in	r24, 0x33	; 51
     f3a:	8d 7f       	andi	r24, 0xFD	; 253
     f3c:	83 bf       	out	0x33, r24	; 51
     f3e:	83 b7       	in	r24, 0x33	; 51
     f40:	84 60       	ori	r24, 0x04	; 4
     f42:	83 bf       	out	0x33, r24	; 51
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	08 95       	ret

00000f48 <TMR0_stop>:
     f48:	83 b7       	in	r24, 0x33	; 51
     f4a:	8e 7f       	andi	r24, 0xFE	; 254
     f4c:	83 bf       	out	0x33, r24	; 51
     f4e:	83 b7       	in	r24, 0x33	; 51
     f50:	8d 7f       	andi	r24, 0xFD	; 253
     f52:	83 bf       	out	0x33, r24	; 51
     f54:	83 b7       	in	r24, 0x33	; 51
     f56:	8b 7f       	andi	r24, 0xFB	; 251
     f58:	83 bf       	out	0x33, r24	; 51
     f5a:	08 95       	ret

00000f5c <TMR0_delay_ms>:
     f5c:	0e 94 a5 08 	call	0x114a	; 0x114a <__floatunsisf>
     f60:	2f e6       	ldi	r18, 0x6F	; 111
     f62:	32 e1       	ldi	r19, 0x12	; 18
     f64:	43 e0       	ldi	r20, 0x03	; 3
     f66:	52 e4       	ldi	r21, 0x42	; 66
     f68:	0e 94 04 08 	call	0x1008	; 0x1008 <__divsf3>
     f6c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fixunssfsi>
     f70:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <u8_gs_delay_ovs>
     f74:	12 be       	out	0x32, r1	; 50
     f76:	0e 94 99 07 	call	0xf32	; 0xf32 <TMR0_start>
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <TMR0_delay_ms+0x26>
     f7c:	88 b7       	in	r24, 0x38	; 56
     f7e:	81 60       	ori	r24, 0x01	; 1
     f80:	88 bf       	out	0x38, r24	; 56
     f82:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <u8_gs_delay_ovs>
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <u32_gs_overflowcounter>
     f90:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <u32_gs_overflowcounter+0x1>
     f94:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <u32_gs_overflowcounter+0x2>
     f98:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <u32_gs_overflowcounter+0x3>
     f9c:	48 17       	cp	r20, r24
     f9e:	59 07       	cpc	r21, r25
     fa0:	6a 07       	cpc	r22, r26
     fa2:	7b 07       	cpc	r23, r27
     fa4:	58 f3       	brcs	.-42     	; 0xf7c <TMR0_delay_ms+0x20>
     fa6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <u32_gs_overflowcounter>
     faa:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <u32_gs_overflowcounter+0x1>
     fae:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <u32_gs_overflowcounter+0x2>
     fb2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <u32_gs_overflowcounter+0x3>
     fb6:	0e 94 a4 07 	call	0xf48	; 0xf48 <TMR0_stop>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 95       	ret

00000fbe <__vector_11>:
}

/** TIMER0 INTERRUPT SERVICE ROUTINE **/
ISR(TIMER0_OVF_vect)
{
     fbe:	1f 92       	push	r1
     fc0:	0f 92       	push	r0
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	0f 92       	push	r0
     fc6:	11 24       	eor	r1, r1
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
	u32_gs_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     fd0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <u32_gs_overflowcounter>
     fd4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <u32_gs_overflowcounter+0x1>
     fd8:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <u32_gs_overflowcounter+0x2>
     fdc:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <u32_gs_overflowcounter+0x3>
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	a1 1d       	adc	r26, r1
     fe4:	b1 1d       	adc	r27, r1
     fe6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <u32_gs_overflowcounter>
     fea:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <u32_gs_overflowcounter+0x1>
     fee:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <u32_gs_overflowcounter+0x2>
     ff2:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <u32_gs_overflowcounter+0x3>
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <__divsf3>:
    1008:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3x>
    100c:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__fp_round>
    1010:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fp_pscB>
    1014:	58 f0       	brcs	.+22     	; 0x102c <__divsf3+0x24>
    1016:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__fp_pscA>
    101a:	40 f0       	brcs	.+16     	; 0x102c <__divsf3+0x24>
    101c:	29 f4       	brne	.+10     	; 0x1028 <__divsf3+0x20>
    101e:	5f 3f       	cpi	r21, 0xFF	; 255
    1020:	29 f0       	breq	.+10     	; 0x102c <__divsf3+0x24>
    1022:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_inf>
    1026:	51 11       	cpse	r21, r1
    1028:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_szero>
    102c:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_nan>

00001030 <__divsf3x>:
    1030:	0e 94 0a 09 	call	0x1214	; 0x1214 <__fp_split3>
    1034:	68 f3       	brcs	.-38     	; 0x1010 <__divsf3+0x8>

00001036 <__divsf3_pse>:
    1036:	99 23       	and	r25, r25
    1038:	b1 f3       	breq	.-20     	; 0x1026 <__divsf3+0x1e>
    103a:	55 23       	and	r21, r21
    103c:	91 f3       	breq	.-28     	; 0x1022 <__divsf3+0x1a>
    103e:	95 1b       	sub	r25, r21
    1040:	55 0b       	sbc	r21, r21
    1042:	bb 27       	eor	r27, r27
    1044:	aa 27       	eor	r26, r26
    1046:	62 17       	cp	r22, r18
    1048:	73 07       	cpc	r23, r19
    104a:	84 07       	cpc	r24, r20
    104c:	38 f0       	brcs	.+14     	; 0x105c <__divsf3_pse+0x26>
    104e:	9f 5f       	subi	r25, 0xFF	; 255
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	44 1f       	adc	r20, r20
    1058:	aa 1f       	adc	r26, r26
    105a:	a9 f3       	breq	.-22     	; 0x1046 <__divsf3_pse+0x10>
    105c:	35 d0       	rcall	.+106    	; 0x10c8 <__divsf3_pse+0x92>
    105e:	0e 2e       	mov	r0, r30
    1060:	3a f0       	brmi	.+14     	; 0x1070 <__divsf3_pse+0x3a>
    1062:	e0 e8       	ldi	r30, 0x80	; 128
    1064:	32 d0       	rcall	.+100    	; 0x10ca <__divsf3_pse+0x94>
    1066:	91 50       	subi	r25, 0x01	; 1
    1068:	50 40       	sbci	r21, 0x00	; 0
    106a:	e6 95       	lsr	r30
    106c:	00 1c       	adc	r0, r0
    106e:	ca f7       	brpl	.-14     	; 0x1062 <__divsf3_pse+0x2c>
    1070:	2b d0       	rcall	.+86     	; 0x10c8 <__divsf3_pse+0x92>
    1072:	fe 2f       	mov	r31, r30
    1074:	29 d0       	rcall	.+82     	; 0x10c8 <__divsf3_pse+0x92>
    1076:	66 0f       	add	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	bb 1f       	adc	r27, r27
    107e:	26 17       	cp	r18, r22
    1080:	37 07       	cpc	r19, r23
    1082:	48 07       	cpc	r20, r24
    1084:	ab 07       	cpc	r26, r27
    1086:	b0 e8       	ldi	r27, 0x80	; 128
    1088:	09 f0       	breq	.+2      	; 0x108c <__divsf3_pse+0x56>
    108a:	bb 0b       	sbc	r27, r27
    108c:	80 2d       	mov	r24, r0
    108e:	bf 01       	movw	r22, r30
    1090:	ff 27       	eor	r31, r31
    1092:	93 58       	subi	r25, 0x83	; 131
    1094:	5f 4f       	sbci	r21, 0xFF	; 255
    1096:	3a f0       	brmi	.+14     	; 0x10a6 <__divsf3_pse+0x70>
    1098:	9e 3f       	cpi	r25, 0xFE	; 254
    109a:	51 05       	cpc	r21, r1
    109c:	78 f0       	brcs	.+30     	; 0x10bc <__divsf3_pse+0x86>
    109e:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_inf>
    10a2:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_szero>
    10a6:	5f 3f       	cpi	r21, 0xFF	; 255
    10a8:	e4 f3       	brlt	.-8      	; 0x10a2 <__divsf3_pse+0x6c>
    10aa:	98 3e       	cpi	r25, 0xE8	; 232
    10ac:	d4 f3       	brlt	.-12     	; 0x10a2 <__divsf3_pse+0x6c>
    10ae:	86 95       	lsr	r24
    10b0:	77 95       	ror	r23
    10b2:	67 95       	ror	r22
    10b4:	b7 95       	ror	r27
    10b6:	f7 95       	ror	r31
    10b8:	9f 5f       	subi	r25, 0xFF	; 255
    10ba:	c9 f7       	brne	.-14     	; 0x10ae <__divsf3_pse+0x78>
    10bc:	88 0f       	add	r24, r24
    10be:	91 1d       	adc	r25, r1
    10c0:	96 95       	lsr	r25
    10c2:	87 95       	ror	r24
    10c4:	97 f9       	bld	r25, 7
    10c6:	08 95       	ret
    10c8:	e1 e0       	ldi	r30, 0x01	; 1
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	bb 1f       	adc	r27, r27
    10d2:	62 17       	cp	r22, r18
    10d4:	73 07       	cpc	r23, r19
    10d6:	84 07       	cpc	r24, r20
    10d8:	ba 07       	cpc	r27, r26
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <__divsf3_pse+0xae>
    10dc:	62 1b       	sub	r22, r18
    10de:	73 0b       	sbc	r23, r19
    10e0:	84 0b       	sbc	r24, r20
    10e2:	ba 0b       	sbc	r27, r26
    10e4:	ee 1f       	adc	r30, r30
    10e6:	88 f7       	brcc	.-30     	; 0x10ca <__divsf3_pse+0x94>
    10e8:	e0 95       	com	r30
    10ea:	08 95       	ret

000010ec <__fixunssfsi>:
    10ec:	0e 94 12 09 	call	0x1224	; 0x1224 <__fp_splitA>
    10f0:	88 f0       	brcs	.+34     	; 0x1114 <__fixunssfsi+0x28>
    10f2:	9f 57       	subi	r25, 0x7F	; 127
    10f4:	98 f0       	brcs	.+38     	; 0x111c <__fixunssfsi+0x30>
    10f6:	b9 2f       	mov	r27, r25
    10f8:	99 27       	eor	r25, r25
    10fa:	b7 51       	subi	r27, 0x17	; 23
    10fc:	b0 f0       	brcs	.+44     	; 0x112a <__fixunssfsi+0x3e>
    10fe:	e1 f0       	breq	.+56     	; 0x1138 <__fixunssfsi+0x4c>
    1100:	66 0f       	add	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	1a f0       	brmi	.+6      	; 0x1110 <__fixunssfsi+0x24>
    110a:	ba 95       	dec	r27
    110c:	c9 f7       	brne	.-14     	; 0x1100 <__fixunssfsi+0x14>
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <__fixunssfsi+0x4c>
    1110:	b1 30       	cpi	r27, 0x01	; 1
    1112:	91 f0       	breq	.+36     	; 0x1138 <__fixunssfsi+0x4c>
    1114:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fp_zero>
    1118:	b1 e0       	ldi	r27, 0x01	; 1
    111a:	08 95       	ret
    111c:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__fp_zero>
    1120:	67 2f       	mov	r22, r23
    1122:	78 2f       	mov	r23, r24
    1124:	88 27       	eor	r24, r24
    1126:	b8 5f       	subi	r27, 0xF8	; 248
    1128:	39 f0       	breq	.+14     	; 0x1138 <__fixunssfsi+0x4c>
    112a:	b9 3f       	cpi	r27, 0xF9	; 249
    112c:	cc f3       	brlt	.-14     	; 0x1120 <__fixunssfsi+0x34>
    112e:	86 95       	lsr	r24
    1130:	77 95       	ror	r23
    1132:	67 95       	ror	r22
    1134:	b3 95       	inc	r27
    1136:	d9 f7       	brne	.-10     	; 0x112e <__fixunssfsi+0x42>
    1138:	3e f4       	brtc	.+14     	; 0x1148 <__fixunssfsi+0x5c>
    113a:	90 95       	com	r25
    113c:	80 95       	com	r24
    113e:	70 95       	com	r23
    1140:	61 95       	neg	r22
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	8f 4f       	sbci	r24, 0xFF	; 255
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	08 95       	ret

0000114a <__floatunsisf>:
    114a:	e8 94       	clt
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <__floatsisf+0x12>

0000114e <__floatsisf>:
    114e:	97 fb       	bst	r25, 7
    1150:	3e f4       	brtc	.+14     	; 0x1160 <__floatsisf+0x12>
    1152:	90 95       	com	r25
    1154:	80 95       	com	r24
    1156:	70 95       	com	r23
    1158:	61 95       	neg	r22
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	8f 4f       	sbci	r24, 0xFF	; 255
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	99 23       	and	r25, r25
    1162:	a9 f0       	breq	.+42     	; 0x118e <__floatsisf+0x40>
    1164:	f9 2f       	mov	r31, r25
    1166:	96 e9       	ldi	r25, 0x96	; 150
    1168:	bb 27       	eor	r27, r27
    116a:	93 95       	inc	r25
    116c:	f6 95       	lsr	r31
    116e:	87 95       	ror	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f1 11       	cpse	r31, r1
    1178:	f8 cf       	rjmp	.-16     	; 0x116a <__floatsisf+0x1c>
    117a:	fa f4       	brpl	.+62     	; 0x11ba <__floatsisf+0x6c>
    117c:	bb 0f       	add	r27, r27
    117e:	11 f4       	brne	.+4      	; 0x1184 <__floatsisf+0x36>
    1180:	60 ff       	sbrs	r22, 0
    1182:	1b c0       	rjmp	.+54     	; 0x11ba <__floatsisf+0x6c>
    1184:	6f 5f       	subi	r22, 0xFF	; 255
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	16 c0       	rjmp	.+44     	; 0x11ba <__floatsisf+0x6c>
    118e:	88 23       	and	r24, r24
    1190:	11 f0       	breq	.+4      	; 0x1196 <__floatsisf+0x48>
    1192:	96 e9       	ldi	r25, 0x96	; 150
    1194:	11 c0       	rjmp	.+34     	; 0x11b8 <__floatsisf+0x6a>
    1196:	77 23       	and	r23, r23
    1198:	21 f0       	breq	.+8      	; 0x11a2 <__floatsisf+0x54>
    119a:	9e e8       	ldi	r25, 0x8E	; 142
    119c:	87 2f       	mov	r24, r23
    119e:	76 2f       	mov	r23, r22
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <__floatsisf+0x5e>
    11a2:	66 23       	and	r22, r22
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <__floatsisf+0x74>
    11a6:	96 e8       	ldi	r25, 0x86	; 134
    11a8:	86 2f       	mov	r24, r22
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	2a f0       	brmi	.+10     	; 0x11ba <__floatsisf+0x6c>
    11b0:	9a 95       	dec	r25
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	da f7       	brpl	.-10     	; 0x11b0 <__floatsisf+0x62>
    11ba:	88 0f       	add	r24, r24
    11bc:	96 95       	lsr	r25
    11be:	87 95       	ror	r24
    11c0:	97 f9       	bld	r25, 7
    11c2:	08 95       	ret

000011c4 <__fp_inf>:
    11c4:	97 f9       	bld	r25, 7
    11c6:	9f 67       	ori	r25, 0x7F	; 127
    11c8:	80 e8       	ldi	r24, 0x80	; 128
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	08 95       	ret

000011d0 <__fp_nan>:
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	80 ec       	ldi	r24, 0xC0	; 192
    11d4:	08 95       	ret

000011d6 <__fp_pscA>:
    11d6:	00 24       	eor	r0, r0
    11d8:	0a 94       	dec	r0
    11da:	16 16       	cp	r1, r22
    11dc:	17 06       	cpc	r1, r23
    11de:	18 06       	cpc	r1, r24
    11e0:	09 06       	cpc	r0, r25
    11e2:	08 95       	ret

000011e4 <__fp_pscB>:
    11e4:	00 24       	eor	r0, r0
    11e6:	0a 94       	dec	r0
    11e8:	12 16       	cp	r1, r18
    11ea:	13 06       	cpc	r1, r19
    11ec:	14 06       	cpc	r1, r20
    11ee:	05 06       	cpc	r0, r21
    11f0:	08 95       	ret

000011f2 <__fp_round>:
    11f2:	09 2e       	mov	r0, r25
    11f4:	03 94       	inc	r0
    11f6:	00 0c       	add	r0, r0
    11f8:	11 f4       	brne	.+4      	; 0x11fe <__fp_round+0xc>
    11fa:	88 23       	and	r24, r24
    11fc:	52 f0       	brmi	.+20     	; 0x1212 <__fp_round+0x20>
    11fe:	bb 0f       	add	r27, r27
    1200:	40 f4       	brcc	.+16     	; 0x1212 <__fp_round+0x20>
    1202:	bf 2b       	or	r27, r31
    1204:	11 f4       	brne	.+4      	; 0x120a <__fp_round+0x18>
    1206:	60 ff       	sbrs	r22, 0
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <__fp_round+0x20>
    120a:	6f 5f       	subi	r22, 0xFF	; 255
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	8f 4f       	sbci	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	08 95       	ret

00001214 <__fp_split3>:
    1214:	57 fd       	sbrc	r21, 7
    1216:	90 58       	subi	r25, 0x80	; 128
    1218:	44 0f       	add	r20, r20
    121a:	55 1f       	adc	r21, r21
    121c:	59 f0       	breq	.+22     	; 0x1234 <__fp_splitA+0x10>
    121e:	5f 3f       	cpi	r21, 0xFF	; 255
    1220:	71 f0       	breq	.+28     	; 0x123e <__fp_splitA+0x1a>
    1222:	47 95       	ror	r20

00001224 <__fp_splitA>:
    1224:	88 0f       	add	r24, r24
    1226:	97 fb       	bst	r25, 7
    1228:	99 1f       	adc	r25, r25
    122a:	61 f0       	breq	.+24     	; 0x1244 <__fp_splitA+0x20>
    122c:	9f 3f       	cpi	r25, 0xFF	; 255
    122e:	79 f0       	breq	.+30     	; 0x124e <__fp_splitA+0x2a>
    1230:	87 95       	ror	r24
    1232:	08 95       	ret
    1234:	12 16       	cp	r1, r18
    1236:	13 06       	cpc	r1, r19
    1238:	14 06       	cpc	r1, r20
    123a:	55 1f       	adc	r21, r21
    123c:	f2 cf       	rjmp	.-28     	; 0x1222 <__fp_split3+0xe>
    123e:	46 95       	lsr	r20
    1240:	f1 df       	rcall	.-30     	; 0x1224 <__fp_splitA>
    1242:	08 c0       	rjmp	.+16     	; 0x1254 <__fp_splitA+0x30>
    1244:	16 16       	cp	r1, r22
    1246:	17 06       	cpc	r1, r23
    1248:	18 06       	cpc	r1, r24
    124a:	99 1f       	adc	r25, r25
    124c:	f1 cf       	rjmp	.-30     	; 0x1230 <__fp_splitA+0xc>
    124e:	86 95       	lsr	r24
    1250:	71 05       	cpc	r23, r1
    1252:	61 05       	cpc	r22, r1
    1254:	08 94       	sec
    1256:	08 95       	ret

00001258 <__fp_zero>:
    1258:	e8 94       	clt

0000125a <__fp_szero>:
    125a:	bb 27       	eor	r27, r27
    125c:	66 27       	eor	r22, r22
    125e:	77 27       	eor	r23, r23
    1260:	cb 01       	movw	r24, r22
    1262:	97 f9       	bld	r25, 7
    1264:	08 95       	ret

00001266 <_exit>:
    1266:	f8 94       	cli

00001268 <__stop_program>:
    1268:	ff cf       	rjmp	.-2      	; 0x1268 <__stop_program>
